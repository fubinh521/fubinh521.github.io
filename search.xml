<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>水王数问题</title>
      <link href="/2023/02/25/algorithm/shuiwangshu/"/>
      <url>/2023/02/25/algorithm/shuiwangshu/</url>
      
        <content type="html"><![CDATA[<p>水王数问题： 如果一个数在数组中的个数 大于 N&#x2F;2个，该数就是水王数。</p><p>解题思路：</p><ol><li>一次删除两个不同的数</li><li>如果没有数剩下来，没有水王数</li><li>有一个数剩下来，这个数可能是水王数</li><li>验证剩下来的数，看看是不是水王数。</li></ol><p>多线程水王数问题： 数的规模很大，比如2000亿长度。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络模型, 负载均衡实现模式(NAT,DR,TUN),LVS四层负载,Keepalived实现高可用</title>
      <link href="/2023/02/25/network-note01-md/"/>
      <url>/2023/02/25/network-note01-md/</url>
      
        <content type="html"><![CDATA[<p>三次握手： 握手成功后在服务端开辟资源</p><p>四次挥手： 要确保服务端释放资源</p><p>资源包括哪些： 文件描述符，端口，内存等</p><p>网卡： ip地址，子网掩码，网关，DNS</p><p>ip地址： 省市区（网络号） + 计算机门牌号</p><p>子网掩码 ： ip地址 &amp; 子网掩码 &#x3D; 得到省市区（网络号）信息</p><p>网关：下一跳的目标路由</p><p>route -n 路由表 ：下一跳机制，每个路由表只存储周边一步之内的数据</p><p>默认网关： destination是0.0.0.0， genmask是0.0.0.0 ， 与运算后就是默认网关。 </p><p>网络工程师的工作是要规划骨干网络，哪些数据包走哪些网络。配置路由下一跳。</p><p>gateway是0.0.0.0 ，表示不需要下一跳，网络是直连的。在局域网内</p><p>完整通信定位： 端口号 + IP地址 + MAC物理地址</p><p>四层负载均衡服务器： 不握手，只转发，数据包经过只看一下信息来决定转发到哪， 流量负载层<br>七层负载： 握手 ， 比如nginx，接入层</p><p>NAT（Virtual Server via Network Address Translation）： 网络地址转换，一般记录在路由器的路由表上，基于三层<br>S-NAT ： 源地址替换<br>D-NAT ： 目标地址替换 ，用于四层负载均衡<br>弊端：带宽成为瓶颈， 请求带宽消耗远远小于 返回带宽消耗。 比如请求百度 ，返回一个很多内容的页面。<br>一个现象： 个人电脑发送东西带宽很慢，下载很快，运营商压榨了发送的带宽。</p><p>DR（Virtual Server via Direct Routing）：基于2层的MAC地址欺骗，RS和负载要在同一局域网（距离就是下一跳，所以需要在同一交换机下）<br>隐藏VIP，对外隐藏，对内可见，对ARP协议进行修改<br>负载均衡器在链路层封装一层RIP的MAC地址。<br>用的最多</p><p>TUN隧道技术（Virtual Server via IP Tunneling）：负载均衡服务器和Real Server不在同一机房。</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/95736379">https://zhuanlan.zhihu.com/p/95736379</a></p><p>LVS ： 四层负载均衡技术。  模块 ipvs </p><p>vmware8 , vmware虚拟网卡 NAT。  windows下 vmware8-NAT软件</p><p>ipvsadm 使用 和配置。 </p><p>LVS服务那台机器是没有tcp连接的，netstat -natp 。 </p><p>高可用问题解决： 1. LVS单点故障问题（lvs服务挂了）  2. RS应用服务某些节点挂掉无法自动下线问题（一部分用户使用异常）。 </p><p>搭建： LVS主备实现。 </p><p>使用keepalived ： 解决单点故障 ，监控服务是否可用。<br>nginx的HA高可用也可以用keepalived<br>配置：vrrp：虚拟路由冗余协议</p><p>keepalived本身也是不可靠的，也会出现单点问题。  这就是一个组件为了解决另一个服务的可靠性问题，而引入了下一个不可靠问题，没完没了。</p><p>所以需要借助zookeeper的强一致性来解决这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis入门</title>
      <link href="/2023/02/19/develop/mybatis-quickstart/"/>
      <url>/2023/02/19/develop/mybatis-quickstart/</url>
      
        <content type="html"><![CDATA[<p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>Java项目中单独如何集成MyBatis</li><li>熟悉MyBatis支持的可配置的功能</li><li>日常使用MyBatis使用普通模式和代理模式如何开发</li><li>代理模式下的参数传递问题</li><li>动态SQL</li><li>多表关联查询 ： 关联查询和级联查询</li><li>MyBatis注解开发</li><li>MyBatis中的缓存使用</li><li>快速开发：MyBatis逆向工程生成单表CRUD代码</li><li>使用Maven将src的MyBatis xml映射也放入编译后target中</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算/异或运算及其演变题目</title>
      <link href="/2023/02/15/algorithm/algorithm-bit-yihuoyunsuan/"/>
      <url>/2023/02/15/algorithm/algorithm-bit-yihuoyunsuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>异或运算 ^  ： 两个数按每个二进制位合并，相同为0，不同为1.  </p></blockquote><p>它有一些很神奇的性质： </p><ol><li>0 ^ N &#x3D; N</li><li>N ^ N &#x3D; 0</li><li>满足交换律和结合律  a ^ b &#x3D; b ^ a ,  (a ^ b) ^ c &#x3D; a ^(b ^ c)  &#x3D; 结果是一个固定的数</li></ol><blockquote><p>其实就是无进位相加</p></blockquote><h2 id="如何不用额外变量交换两个数"><a href="#如何不用额外变量交换两个数" class="headerlink" title="如何不用额外变量交换两个数"></a>如何不用额外变量交换两个数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规做法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 异或</span></span><br><span class="line">a = a ^ b  <span class="comment">// a = a^b  b=b</span></span><br><span class="line">b = a ^ b  <span class="comment">// b = a ^ b ^ b = a</span></span><br><span class="line">a = a ^ b  <span class="comment">// a = a ^ b ^ a = b</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： a 和 b变量必须是独立的内存区域，不然计算会出错。</p></blockquote><h2 id="一个数组有一种数出现了奇数次，其他数都是偶数次，怎么打印这个数"><a href="#一个数组有一种数出现了奇数次，其他数都是偶数次，怎么打印这个数" class="headerlink" title="一个数组有一种数出现了奇数次，其他数都是偶数次，怎么打印这个数"></a>一个数组有一种数出现了奇数次，其他数都是偶数次，怎么打印这个数</h2><p>[ a, b, a,c,c,d,d,d,d]  两个相同的数异或 &#x3D; 0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arr.length - <span class="number">1</span> ; i++) &#123;</span><br><span class="line">    result ^= arr[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><h2 id="小技巧-怎么把一个int类型的数提取出最右侧的1来"><a href="#小技巧-怎么把一个int类型的数提取出最右侧的1来" class="headerlink" title="小技巧: 怎么把一个int类型的数提取出最右侧的1来"></a>小技巧: 怎么把一个int类型的数提取出最右侧的1来</h2><p>比如 ： 0011011010101100 ， 得到结果0000000000000100</p><blockquote><p>a &amp; (-a)    , -a &#x3D; ~a + 1 , a取反加1就是负a</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a      = <span class="number">01101110010000</span></span><br><span class="line">~a     = <span class="number">10010001101111</span></span><br><span class="line">~a + <span class="number">1</span> = <span class="number">10010001110000</span></span><br><span class="line">------------------------</span><br><span class="line">         <span class="number">00000000010000</span></span><br></pre></td></tr></table></figure><h2 id="一个数组中有两种数出现了奇数次，其他数出现了偶数次，怎么找到并打印这两种数"><a href="#一个数组中有两种数出现了奇数次，其他数出现了偶数次，怎么找到并打印这两种数" class="headerlink" title="一个数组中有两种数出现了奇数次，其他数出现了偶数次，怎么找到并打印这两种数"></a>一个数组中有两种数出现了奇数次，其他数出现了偶数次，怎么找到并打印这两种数</h2><blockquote><p>解题思路分析</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设一个数组arr[]： a和b出现了奇数次</span></span><br><span class="line">a ^ b ^ ..... 异或所有 = a ^ b = eor</span><br><span class="line">由于a != b , 所以a ^ b != <span class="number">0</span></span><br><span class="line">eor结果某个位置上一定为<span class="number">1</span> . 比如找eor最右侧的<span class="number">1</span> .  </span><br><span class="line">    </span><br><span class="line"><span class="comment">//假设从右开始第三位为1，说明a的第三位和b的第三位一定不同</span></span><br><span class="line">可以把arr[]所有的数分成两类，第一类是第三位是<span class="number">1</span>的数，另一类是第三位是<span class="number">0</span>的数</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 假设 a的第三位是1，b的第三位是0</span></span><br><span class="line">eor` = 第三位是<span class="number">1</span>的所有数异或 得到 a , 因为其他不是a的数一定会出现偶数次</span><br><span class="line">b = eor ^ eor` = (a ^ b) ^ a  = b</span><br></pre></td></tr></table></figure><blockquote><p>代码实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arr中，有两种数，出现奇数次</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printOddTimesNum2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">eor</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">eor ^= arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a 和 b是两种数</span></span><br><span class="line"><span class="comment">// eor != 0</span></span><br><span class="line"><span class="comment">// eor最右侧的1，提取出来</span></span><br><span class="line"><span class="comment">// eor :     00110010110111000</span></span><br><span class="line"><span class="comment">// rightOne :00000000000001000</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rightOne</span> <span class="operator">=</span> eor &amp; (-eor); <span class="comment">// 提取出最右的1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">onlyOne</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// eor&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arr.length;i++) &#123;</span><br><span class="line"><span class="comment">//  arr[1] =  111100011110000</span></span><br><span class="line"><span class="comment">// rightOne=  000000000010000</span></span><br><span class="line"><span class="keyword">if</span> ((arr[i] &amp; rightOne) != <span class="number">0</span>) &#123;</span><br><span class="line">onlyOne ^= arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(onlyOne + <span class="string">&quot; &quot;</span> + (eor ^ onlyOne));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个数组中有一种数出现了K次，其他数出现了M次，M-gt-1-，K-lt-M-，找打出现K次的数。"><a href="#一个数组中有一种数出现了K次，其他数出现了M次，M-gt-1-，K-lt-M-，找打出现K次的数。" class="headerlink" title="一个数组中有一种数出现了K次，其他数出现了M次，M &gt; 1 ，K &lt; M ，找打出现K次的数。"></a>一个数组中有一种数出现了K次，其他数出现了M次，M &gt; 1 ，K &lt; M ，找打出现K次的数。</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算/整数打印32位二进制数</title>
      <link href="/2023/02/14/algorithm/algorithm-bit-print-binrary/"/>
      <url>/2023/02/14/algorithm/algorithm-bit-print-binrary/</url>
      
        <content type="html"><![CDATA[<blockquote><p>num &amp; (1 &lt;&lt; i)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Integer_PrintBinrary</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">83928328</span>;</span><br><span class="line">        print(num);</span><br><span class="line"></span><br><span class="line">        print(<span class="number">1</span>&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        print(<span class="number">1</span>&lt;&lt;<span class="number">2</span>);</span><br><span class="line">        print(<span class="number">1</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line">        print(<span class="number">1</span>&lt;&lt;<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//负数表示 ： 除去符号位取反 + 1  , 为什么这么设计? 为了兼容计算机底层的加减乘除的位运算适用一套逻辑。</span></span><br><span class="line">        print(-<span class="number">1</span>); <span class="comment">// 11111111111111111111111111111111</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MIN_VALUE;  <span class="comment">// -2^31</span></span><br><span class="line">        print(min); <span class="comment">// 10000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//取反</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">11213</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ~b;</span><br><span class="line">        print(b);</span><br><span class="line">        print(c);</span><br><span class="line">        <span class="comment">//00000000000000000010101111001101</span></span><br><span class="line">        <span class="comment">//11111111111111111101010000110010</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//位运算测试</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bit1</span> <span class="operator">=</span> <span class="number">1231221</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bit2</span> <span class="operator">=</span> <span class="number">5342312</span>;</span><br><span class="line">        print(bit1);</span><br><span class="line">        print(bit2);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        print(bit1 | bit2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * a = 1&lt;&lt; i  ，1向左移(不带符号)动i位。</span></span><br><span class="line"><span class="comment">     * num &amp; a 得到i位置上的1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 比如 4的32位二进制表示为 00000000000000000000000000010000</span></span><br><span class="line"><span class="comment">     * 这个数和每次左移的数进行 与 运算，得到二进制位上每一位上的值0或1。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">31</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            System.out.print((num &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span> ? <span class="string">&quot;0&quot;</span>:<span class="number">1</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux磁盘满了如何排查</title>
      <link href="/2023/02/12/linux/linux-disk-full/"/>
      <url>/2023/02/12/linux/linux-disk-full/</url>
      
        <content type="html"><![CDATA[<p>磁盘满了的现象，命令行报异常：cannot create temp file for here-document: No space left on device<br>所在服务报502 </p><ol><li>首先 <code>df -h</code>  查看总体资源占用，查看的结果一般如下图的地方是100%</li></ol><img src="/2023/02/12/linux/linux-disk-full/df-h.png" class=""><ol start="2"><li><p>然后从根目录使用命令  <code>du -h -x --max-depth=1</code> 逐层搜索，看哪个文件夹占用大,找到没用的临时文件，清理即可。</p></li><li><p>如果查到某日志文件过大没有及时清理，可以手动释放日志文件nohup.out文件的空间： echo “” &gt; nohup.out</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac和Linux安装和启动Jenkins并配置JavaClient调用环境</title>
      <link href="/2023/02/10/devops/jenkins-install-in-mac-or-linux-and-client-env/"/>
      <url>/2023/02/10/devops/jenkins-install-in-mac-or-linux-and-client-env/</url>
      
        <content type="html"><![CDATA[<h2 id="Mac-安装Jenkins"><a href="#Mac-安装Jenkins" class="headerlink" title="Mac 安装Jenkins"></a>Mac 安装Jenkins</h2><p>(1) 常规做法：安装homebrew来管理mac上的jenkins或其他软件</p><p>需要开通<a href="https://github.com/">https://github.com</a><br><a href="https://raw.githubusercontent.com/">https://raw.githubusercontent.com</a> (安装homebrew)，国外网速限制，建议配置清华镜像homebrew：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p><p>安装jenkins：brew install jenkins  ， 会自动下载所需的依赖 ， homebrew详细用法移步：<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a></p><p>通过homedrew安装后jenkins安装好后所在的位置：<br>实际安装位置：&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;jenkins&#x2F;<br>配置文件所在位置：&#x2F;usr&#x2F;local&#x2F;opt&#x2F;jenkins&#x2F;<br>工作空间位置：&#x2F;Users&#x2F;用户&#x2F;.jenkins<br>进入工作空间位置：cd ~&#x2F;.jenkins</p><p>修改默认端口的方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 打开文件 vi /usr/local/opt/jenkins/homebrew.mxcl.jenkins.plist</span><br><span class="line">2. 修改默认端口号8090</span><br><span class="line">• 启动jenkins： brew services start jenkins</span><br><span class="line">• 停止jenkins：brew services stop jenkins</span><br><span class="line">• 重启Jenkins：brew services restart jenkins</span><br></pre></td></tr></table></figure><p>命令行下修改Jenkins端口：sudo defaults write &#x2F;Library&#x2F;Preferences&#x2F;org.jenkins-ci httpPort 8090<br>启动jenkins ：sudo launchctl load &#x2F;Library&#x2F;LaunchDaemons&#x2F;org.jenkins-ci.plist<br>停止jenkins：sudo launchctl unload &#x2F;Library&#x2F;LaunchDaemons&#x2F;org.jenkins-ci.plist</p><blockquote><p> 使用上目前可能出现两种(brew和launchctl)开启起动方式，如果重启出现不能用，建议手动杀掉进程，手动执行brew services start jenkins</p></blockquote><p>(2) war包直接安装</p><p>遇到brew安装升级有问题，可以直接下载war包来启动jenkins，或者替换已经使用brew安装好的<code>/usr/local/Cellar/jenkins/</code>路径下的war包</p><p>命令行启动如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/bin/java -Dmail.smtp.starttls.enable=true -Dhudson.util.ProcessTreeKiller.disable=true  \</span><br><span class="line"></span><br><span class="line">-jar /usr/local/op t/jenkins/libexec/jenkins.war --httpListenAddress=0.0.0.0 --httpPort=8090 &amp;</span><br></pre></td></tr></table></figure><p>(3)其他</p><blockquote><p>jenkins开放局域网访问</p></blockquote><p>使用brew安装jenkins会避免很多其他安装方式产生的用户权限问题，但是会将httpListenAddress默认设置为127.0.0.1，<br>这样我们虽然可以在本地用localhost:8080访问，但是本机和局域网均无法用ip访问。解决办法为修改两个路径下的plist配置。并重启<br>~&#x2F;Library&#x2F;LaunchAgents&#x2F;homebrew.mxcl.jenkins.plist<br>&#x2F;usr&#x2F;local&#x2F;opt&#x2F;jenkins&#x2F;homebrew.mxcl.jenkins.plist<br>将上面两个plist中的httpListenAddress后的ip地址，修改为本机IP或者0.0.0.0即可</p><h2 id="Linux-CentOS安装Jenkins"><a href="#Linux-CentOS安装Jenkins" class="headerlink" title="Linux CentOS安装Jenkins"></a>Linux CentOS安装Jenkins</h2><p>rpm安装：<a href="https://pkg.jenkins.io/redhat-stable/">https://pkg.jenkins.io/redhat-stable/</a> 下载rpm包 执行 <code>rpm -ivh jenkins-2.213-1.1.noarch.rpm</code></p><p>启动jenkins : service jenkins start &#x2F; systemctl start jenkins<br>停止jenkins : service jenkins stop &#x2F; systemctl stop jenkins<br>重启jenkins : service jenkins restart &#x2F; systemctl restart jenkins</p><blockquote><p>设置jenkins相关配置 ： 进入&#x2F;etc&#x2F;sysconfig&#x2F;jenkins </p></blockquote><p>端口 ： JENKINS_PORT：8090<br>主目录 : JENKINS_HOME :jenkins默认主目录为：&#x2F;var&#x2F;lib&#x2F;jenkins，存放软件和业务数据<br>JENKINS_USER&#x3D;”root”</p><blockquote><p>编辑jenkins配置中的jdk参数 : &#x2F;etc&#x2F;init.d&#x2F;jenkins  </p></blockquote><p>设置该参数candidates&#x3D;&#x2F;opt&#x2F;app&#x2F;jdk1.8.0_211&#x2F;bin&#x2F;java (jdk安装目录，通过which java命令获取)</p><blockquote><p>修改插件下载源地址</p></blockquote><p> 打开文件：&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;hudson.model.UpdateCenter.xml<br>替换地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p><p>rpm卸载：<code>rpm -e jenkins</code></p><p><code>rpm -ql jenkins</code> 检查是否卸载成功</p><p>彻底删除残留文件： <code>find / -iname jenkins | xargs -n 1000 rm -rf</code></p><blockquote><p>在Linux构建Android和Java应用还需要安装：jdk，maven，git，gradle，sdk，node等 </p></blockquote><p>安装这些环境的步骤大同小异：下载解压安装包，配置系统环境变量，通常是编辑&#x2F;etc&#x2F;profile : vi &#x2F;etc&#x2F;profile  ， </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#java</span></span><br><span class="line">export JAVA_HOME=/root/phoenix/jdk1<span class="number">.8</span><span class="number">.0_211</span></span><br><span class="line">export PATH=$JAVA_HOME/<span class="built_in">bin</span>:$PATH</span><br></pre></td></tr></table></figure><p>最后执行 ：source &#x2F;etc&#x2F;profile 使环境变量生效即可。</p><h2 id="Jenkins-Java-Client-API本地调用环境"><a href="#Jenkins-Java-Client-API本地调用环境" class="headerlink" title="Jenkins Java Client API本地调用环境"></a>Jenkins Java Client API本地调用环境</h2><p>Github开源代码地址：<a href="https://github.com/jenkinsci/java-client-api">https://github.com/jenkinsci/java-client-api</a></p><p>本地IDEA创建空的Maven工程，引入jenkins-client依赖, <a href="https://search.maven.org/artifact/com.offbytwo.jenkins/jenkins-client/0.3.8/">https://search.maven.org/artifact/com.offbytwo.jenkins/jenkins-client/0.3.8/</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.offbytwo.jenkins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jenkins-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，maven 的setting.xml建议使用默认配置 <a href="settings.xml">setting.xml</a>，使用aliyun仓库可能会出现部分jar包拉不下来的情况 </p></blockquote><p>另一个jenkins rest api 也值得研究：<a href="https://github.com/cdancy/jenkins-rest">https://github.com/cdancy/jenkins-rest</a> </p>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算/实现加减乘除(leetcode)</title>
      <link href="/2023/02/09/algorithm/algorithm-leetcode-bit-computer/"/>
      <url>/2023/02/09/algorithm/algorithm-leetcode-bit-computer/</url>
      
        <content type="html"><![CDATA[<p> leetcode试题地址：<a href="https://leetcode.com/problems/divide-two-integ">https://leetcode.com/problems/divide-two-integ</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Leetcode01_divide_two_integers</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能出现加号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a;</span><br><span class="line">        <span class="comment">// 直到进位信息变为0 ，返回无进位相加信息就是答案</span></span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 无进位相加的信息</span></span><br><span class="line">            sum = a ^ b;</span><br><span class="line">            <span class="comment">// 进位信息 b-&gt; b`</span></span><br><span class="line">            b = (a &amp; b) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// a-&gt; a`</span></span><br><span class="line">            a = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相反数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">negNum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> add(~n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a-b ， a加上b的相反数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minus</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> add(a, negNum(b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法  小学乘法运算</span></span><br><span class="line">    <span class="comment">// a = 0110</span></span><br><span class="line">    <span class="comment">// b = 0111</span></span><br><span class="line">    <span class="comment">// ans = 0110 + 01100(补0) + 011000（补0）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">multi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 末尾有1 ，a算到结果里去</span></span><br><span class="line">            <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                res = add(res, a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// a左移一位</span></span><br><span class="line">            a &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// b不带符号右移一位</span></span><br><span class="line">            <span class="comment">// b&gt;&gt; 1 表示符号位补 ， b&gt;&gt;&gt;1 表示用0来补</span></span><br><span class="line">            b &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是不是负数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNeg</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// a / b = c</span></span><br><span class="line">    <span class="comment">// 假设 b = 01110 ，c = 00110</span></span><br><span class="line">    <span class="comment">// a = b * 2^1 + b* 2^2</span></span><br><span class="line">    <span class="comment">// a = b &lt;&lt; 1 + b &lt;&lt; 2</span></span><br><span class="line">    <span class="comment">// c 在第3位是1 ，第1位是1，其余位0</span></span><br><span class="line">    <span class="comment">// a - 2^ 2 = a`</span></span><br><span class="line">    <span class="comment">// a` - 2^1 = a``  直到 - - - &gt; a```` = 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> isNeg(a) ? negNum(a) : a;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> isNeg(b) ? negNum(b) : b;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">30</span>; i &gt;= <span class="number">0</span>; i = minus(i, <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((x &gt;&gt; i) &gt;= y) &#123;</span><br><span class="line">                res |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">                x = minus(x, y &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isNeg(a) ^ isNeg(b) ? negNum(res) : res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最小值无法取绝对值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == Integer.MIN_VALUE &amp;&amp; b == Integer.MIN_VALUE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b == Integer.MIN_VALUE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == Integer.MIN_VALUE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b == negNum(<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">// leetcode约定， 理论上得到max +1</span></span><br><span class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// a 加一个1 得到 一个结果</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> div(add(a, <span class="number">1</span>), b);</span><br><span class="line">                <span class="comment">// c * b = d , 比较a和d差多少，用a-d div  b 得到另一个结果， 两者结果相加，相当于补偿了一次。</span></span><br><span class="line">                <span class="keyword">return</span> add(c, div(minus(a, multi(c, b)), b));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> div(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算/BitMap位图表示某事物是否存在的集合</title>
      <link href="/2023/02/09/algorithm/algorithm-bitmap-present-something-exist/"/>
      <url>/2023/02/09/algorithm/algorithm-bitmap-present-something-exist/</url>
      
        <content type="html"><![CDATA[<h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><p>一个整数表示 0-31是否存在的集合。   一个整数4字节，32位， 0-31只要出现在相应位置上标记为1.  节省空间， 如果用hashset来存储，需要 （ 4字节*32 ） 个字节空间</p><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><p>表示 0-1023 的集合， 使用一个int[]数组 ， 1024&#x2F;32 &#x3D; 32， 所以准备一个int[32]的数据即可。</p><h1 id="位图的功能和好处以及Java代码实现"><a href="#位图的功能和好处以及Java代码实现" class="headerlink" title="位图的功能和好处以及Java代码实现"></a>位图的功能和好处以及Java代码实现</h1><ol><li>位图的功能： 做成一个集合， 数字范围确定，可以告诉你存在还是不存在</li><li>位图的好处：极大的压缩空间</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitMap</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span>[] bits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右移6位，= 除以64  -&gt; (max + 64 ) / 64</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BitMap</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        bits = <span class="keyword">new</span> <span class="title class_">long</span>[(max + <span class="number">64</span>) &gt;&gt; <span class="number">6</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    <span class="comment">// num &gt;&gt; 6 -&gt;  num / 64 决定是第几个整数</span></span><br><span class="line">    <span class="comment">// num &amp; 63 -&gt;  num % 64 num模64 等价于 num 与 63（只选7位数01111111） ， num在Long中在第几位。</span></span><br><span class="line">    <span class="comment">// |=  -&gt; x = x1 | x2  把相应位置标为1 ， 1L 也有64位</span></span><br><span class="line">    <span class="comment">// bits[2] = bits[2] | (1L &lt;&lt; 42) -&gt; 第二个数字， 第42位，标记成1 ， 主意必须是1L，长整型数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        bits[num &gt;&gt; <span class="number">6</span>] |= (<span class="number">1L</span> &lt;&lt; (num &amp; <span class="number">63</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="comment">// 把相应位置标为0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        bits[num &gt;&gt; <span class="number">6</span>] &amp;= ~(<span class="number">1L</span> &lt;&lt; (num &amp; <span class="number">63</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否包含</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (bits[num &gt;&gt; <span class="number">6</span>] &amp; (<span class="number">1L</span> &lt;&lt; (num &amp; <span class="number">63</span>))) != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试开始！&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="type">BitMap</span> <span class="variable">bitMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BitMap</span>(max);</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTime</span> <span class="operator">=</span> <span class="number">10000000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; testTime; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * (max + <span class="number">1</span>));</span><br><span class="line">            <span class="type">double</span> <span class="variable">decide</span> <span class="operator">=</span> Math.random();</span><br><span class="line">            <span class="comment">// 1/3概率加一个数</span></span><br><span class="line">            <span class="keyword">if</span> (decide &lt; <span class="number">0.333</span>) &#123;</span><br><span class="line">                bitMap.add(num);</span><br><span class="line">                set.add(num);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (decide &lt; <span class="number">0.666</span>) &#123;</span><br><span class="line">                <span class="comment">// 1/3概率删除一个数</span></span><br><span class="line">                bitMap.delete(num);</span><br><span class="line">                set.remove(num);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 1/3概率查一个数</span></span><br><span class="line">                <span class="keyword">if</span> (bitMap.contains(num) != set.contains(num)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Oops!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>; num &lt;= max; num++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bitMap.contains(num) != set.contains(num)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Oops!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他算法/数组前缀和</title>
      <link href="/2023/02/09/algorithm/algorithm-array-prefix-sum/"/>
      <url>/2023/02/09/algorithm/algorithm-array-prefix-sum/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>sum(arr,L,R), 查询数组L…R的累加和， 比如数组 [1,2,3,4,5], sum(1,3) 就是下标是2,3,4的数组区间和累加和 即 2+3+4 &#x3D; 9</p><ol><li>暴力循环解法<br>当需求需要查询这种范围的结果特别频繁时,考虑使用如下两种方法。</li><li>二维数组空间换时间解法<br>二维数组计算出所有情况的累加和，但是需要空间复杂度O(n^2&#x2F;2),时间复杂度O(1).</li><li>前缀和解法<br>一维辅助数组计算数组的前缀和，空间复杂度O(n),时间复杂度O(1) ,<br>k的前缀和概念就是arr[0,k]的累加和， sum(arr,L…R) &#x3D; help[R] - help[L-1] , 如果L&#x3D;0，前缀和即是help[R].</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prefix_num_sum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//测试 二维数组空间换时间</span></span><br><span class="line">        <span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        initSumOfRangeL_R(arr1);</span><br><span class="line">        System.out.println(getSumOfRangeL_R(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试 前缀和</span></span><br><span class="line">        <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        initPreSum(arr2);</span><br><span class="line">        System.out.println(getPreSum(arr2,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暴力解法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> L</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> R</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>  <span class="title function_">simpleSumOfRangeL_R</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L , <span class="type">int</span> R)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= L  &amp;&amp; i &lt;=R) &#123;</span><br><span class="line">                result += arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二维数组空间换时间解法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] help ;</span><br><span class="line">    <span class="comment">// 二维数组计算L...R区间的累加和实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initSumOfRangeL_R</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        help = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">        <span class="comment">//初始化二维数组 horizontal 水平  vertical 垂直</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">hor</span> <span class="operator">=</span> <span class="number">0</span>; hor &lt; N; hor++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">ver</span> <span class="operator">=</span> <span class="number">0</span>; ver &lt; N; ver++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hor == ver) &#123;</span><br><span class="line">                    help[hor][ver] = arr[hor];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(hor &gt; ver &amp; hor &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    help[hor][ver] = help[hor - <span class="number">1</span>][ver] + arr[hor];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSumOfRangeL_R</span><span class="params">(<span class="type">int</span> L, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 取值不要弄反横纵坐标</span></span><br><span class="line">        <span class="keyword">return</span> help[R][L];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一维辅助数组计算数组的前缀和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] preSumHelp;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initPreSum</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        preSumHelp = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        preSumHelp[<span class="number">0</span>] = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">            preSumHelp[i] = preSumHelp[i-<span class="number">1</span>] + arr[i] ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getPreSum</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L ,<span class="type">int</span> R)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (L &gt; R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//如果从0开始，直接取R的前缀和，L大于0，则需要相减</span></span><br><span class="line">        <span class="keyword">return</span> L == <span class="number">0</span> ? preSumHelp[R] : preSumHelp[R] - preSumHelp[L-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表/链表基础题</title>
      <link href="/2023/02/09/algorithm/algorithm-linkedlist-base-code/"/>
      <url>/2023/02/09/algorithm/algorithm-linkedlist-base-code/</url>
      
        <content type="html"><![CDATA[<h1 id="单链表节点定义"><a href="#单链表节点定义" class="headerlink" title="单链表节点定义"></a>单链表节点定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单链表节点定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> V value;</span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(V data)</span> &#123;</span><br><span class="line">        value = data;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向链表节点定义"><a href="#双向链表节点定义" class="headerlink" title="双向链表节点定义"></a>双向链表节点定义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表结构</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleNode</span>&lt;V&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> V value;</span><br><span class="line">    <span class="keyword">public</span> DoubleNode&lt;V&gt; last;</span><br><span class="line">    <span class="keyword">public</span> DoubleNode&lt;V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleNode</span><span class="params">(V v)</span> &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        last = <span class="literal">null</span>;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单链表反转"><a href="#单链表反转" class="headerlink" title="单链表反转"></a>单链表反转</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 原始单链表：a → b → c → d → null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 设计一个函数，必须有返回值（链表头部）： node=f(head) , 反转后node返回是节点d。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 目标输出单链表结构：null ← a ← b ← c ← d</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Linkedlist01_reverse_singlelist</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">reverseLinkedList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="comment">//准备两个变量</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 新链表头new</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//旧链表头old</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单链表实现队列"><a href="#单链表实现队列" class="headerlink" title="单链表实现队列"></a>单链表实现队列</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Linkedlist02_singlelist_implement_queue</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  队列结构</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span>&lt;V&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;V&gt; head;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;V&gt; tail;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">            head = <span class="literal">null</span>;</span><br><span class="line">            tail = <span class="literal">null</span>;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据压入队列</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offer</span><span class="params">(V value)</span> &#123;</span><br><span class="line">            <span class="comment">//根据传进来的值创建一个节点</span></span><br><span class="line">            Node&lt;V&gt; cur = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;V&gt;(value);</span><br><span class="line">            <span class="keyword">if</span> (tail == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//初始化头部和尾部</span></span><br><span class="line">                head = cur;</span><br><span class="line">                tail = cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//从尾部追加节点</span></span><br><span class="line">                tail.next = cur;</span><br><span class="line">                tail = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据从队列弹出</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// C/C++的同学需要做节点析构的工作</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">                ans = head.value;</span><br><span class="line">                head = head.next;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//为什么要释放tail，因为需要与head保持一致，不然tail指向的元素不会被释放</span></span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">                tail = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// C/C++的同学需要做节点析构的工作</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">                ans = head.value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单链表实现栈"><a href="#单链表实现栈" class="headerlink" title="单链表实现栈"></a>单链表实现栈</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Linkedlist03_singlelist_implement_stack</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 栈结构</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyStack</span>&lt;V&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;V&gt; head; <span class="comment">//一个变量实现</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">            head = <span class="literal">null</span>;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 加入数据</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(V value)</span> &#123;</span><br><span class="line">            Node&lt;V&gt; cur = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value);<span class="comment">//新建一个节点</span></span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//头部</span></span><br><span class="line">                head = cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = head;</span><br><span class="line">                head = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 弹出数据</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">                ans = head.value;</span><br><span class="line">                head = head.next;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> head != <span class="literal">null</span> ? head.value : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向链表反转"><a href="#双向链表反转" class="headerlink" title="双向链表反转"></a>双向链表反转</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Linkedlist04_reverse_double_linkedlist</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DoubleNode <span class="title function_">reverseDoubleList</span><span class="params">(DoubleNode head)</span> &#123;</span><br><span class="line">        <span class="type">DoubleNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 新链表 new</span></span><br><span class="line">        <span class="type">DoubleNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//旧链表 old</span></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = pre;</span><br><span class="line">            head.last = next;</span><br><span class="line">            pre = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向链表实现双端队列"><a href="#双向链表实现双端队列" class="headerlink" title="双向链表实现双端队列"></a>双向链表实现双端队列</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双链表实现双端队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Linkedlist05_doublelinkedlist_implement_doublequeue</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双端队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyDeque</span>&lt;V&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> DoubleNode&lt;V&gt; head;</span><br><span class="line">        <span class="keyword">private</span> DoubleNode&lt;V&gt; tail;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyDeque</span><span class="params">()</span> &#123;</span><br><span class="line">            head = <span class="literal">null</span>;</span><br><span class="line">            tail = <span class="literal">null</span>;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 头部加</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushHead</span><span class="params">(V value)</span> &#123;</span><br><span class="line">            DoubleNode&lt;V&gt; cur = <span class="keyword">new</span> <span class="title class_">DoubleNode</span>&lt;&gt;(value);</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">                head = cur;</span><br><span class="line">                tail = cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur.next = head;</span><br><span class="line">                head.last = cur;</span><br><span class="line">                head = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 尾部加</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushTail</span><span class="params">(V value)</span> &#123;</span><br><span class="line">            DoubleNode&lt;V&gt; cur = <span class="keyword">new</span> <span class="title class_">DoubleNode</span>&lt;&gt;(value);</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//第一个节点</span></span><br><span class="line">                head = cur;</span><br><span class="line">                tail = cur;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不是第一个节点</span></span><br><span class="line">                tail.next = cur;</span><br><span class="line">                cur.last = tail;</span><br><span class="line">                tail = cur;</span><br><span class="line">            &#125;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 头部弹出</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> ans</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">pollHead</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            ans = head.value;</span><br><span class="line">            <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">                head = <span class="literal">null</span>;</span><br><span class="line">                tail = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                head = head.next;</span><br><span class="line">                head.last = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 尾部弹出</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">pollTail</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            ans = tail.value;</span><br><span class="line">            <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">                head = <span class="literal">null</span>;</span><br><span class="line">                tail = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tail = tail.last;</span><br><span class="line">                tail.next = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 头部获取，不弹出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">peekHead</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">                ans = head.value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 尾部获取，不弹出</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">peekTail</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (tail != <span class="literal">null</span>) &#123;</span><br><span class="line">                ans = tail.value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分及扩展/二分法题目</title>
      <link href="/2023/02/09/algorithm/algorithm-binrary-search/"/>
      <url>/2023/02/09/algorithm/algorithm-binrary-search/</url>
      
        <content type="html"><![CDATA[<h1 id="有序数组中找到一个数num"><a href="#有序数组中找到一个数num" class="headerlink" title="有序数组中找到一个数num"></a>有序数组中找到一个数num</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有序数组中找到num</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Getnum01_in_sortedarray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> arr.length - <span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line">            <span class="comment">// 防止越界可以这么写： int mid = L + (R-L)/2</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (L + R)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &lt; num) &#123;</span><br><span class="line">                L = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; num ) &#123;</span><br><span class="line">                R = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="升序有序数组中找到大于等于num的最左位置"><a href="#升序有序数组中找到大于等于num的最左位置" class="headerlink" title="升序有序数组中找到大于等于num的最左位置"></a>升序有序数组中找到大于等于num的最左位置</h1><p>位置从0开始 , [1,2,2,2,3,4,5,5,6,7]<br> num &#x3D; 2 ,&gt;&#x3D;num最左的位置是1 。如果num&#x3D;4 ，&gt;&#x3D;num最左的位置是5</p><p> 要点： 二分不会在找到某个数就停止，必须全部二分完毕才会停止。 记录&gt;&#x3D;num的位置，并一直更新它。<br> 能处理找不到该数的极端情况。返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Getnum02_mostLeftNoLess_in_sortedarray</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// arr有序的，返回 &gt;=num最左的位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">mostLeftNoLessNumIndex</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> arr.length -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">answer</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (L &lt;=R) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (L + R) /<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt;= num) &#123;</span><br><span class="line">                answer = mid;</span><br><span class="line">                R = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                L = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="升序有序数组中找到小于等于num的最右位置"><a href="#升序有序数组中找到小于等于num的最右位置" class="headerlink" title="升序有序数组中找到小于等于num的最右位置"></a>升序有序数组中找到小于等于num的最右位置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Getnum03_mostRightNoMore_in_sortedarray</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在arr上，找满足&lt;=value的最右位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nearestIndex</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// 记录最右的对号</span></span><br><span class="line">        <span class="keyword">while</span> (L &lt;= R) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> L + ((R - L) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &lt;= value) &#123;</span><br><span class="line">                index = mid;</span><br><span class="line">                L = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                R = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt;= value) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] generateRandomArray(<span class="type">int</span> maxSize, <span class="type">int</span> maxValue) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[(<span class="type">int</span>) ((maxSize + <span class="number">1</span>) * Math.random())];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="type">int</span>) ((maxValue + <span class="number">1</span>) * Math.random()) - (<span class="type">int</span>) (maxValue * Math.random());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTime</span> <span class="operator">=</span> <span class="number">500000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">succeed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; testTime; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] arr = generateRandomArray(maxSize, maxValue);</span><br><span class="line">            Arrays.sort(arr);</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> (<span class="type">int</span>) ((maxValue + <span class="number">1</span>) * Math.random()) - (<span class="type">int</span>) (maxValue * Math.random());</span><br><span class="line">            <span class="keyword">if</span> (test(arr, value) != nearestIndex(arr, value)) &#123;</span><br><span class="line">                printArray(arr);</span><br><span class="line">                System.out.println(value);</span><br><span class="line">                System.out.println(test(arr, value));</span><br><span class="line">                System.out.println(nearestIndex(arr, value));</span><br><span class="line">                succeed = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(succeed ? <span class="string">&quot;Nice!&quot;</span> : <span class="string">&quot;Fucking fucked!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="局部最小值"><a href="#局部最小值" class="headerlink" title="局部最小值"></a>局部最小值</h1><p> 条件：有一个数组，无序， 任意两个相邻的数不想等。</p><p> 什么是局部最小，有三种情况：</p><ul><li><ol><li>[0] &lt; [1] ,则 0位置局部最小  有，则返回0位置</li></ol></li><li><ol start="2"><li>[n-2] &gt; [n-1] ,则n-1位置局部最小。  有，则返回n-1位置</li></ol></li><li><ol start="3"><li>左&gt;[i]&lt;右 , 则i位置局部最小。 如果1,2都没有，则3必有局部最小。</li></ol></li></ul><p> 期望：返回一个局部最小的数。</p><p> 二分后，mid 检查mid是否满足，满足则直接返回。<br> 如果mid不满足，看mid左右两侧哪个比mid小，说明这一侧必存在局部最小，砍掉另一侧。  -继续二分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Getnum04_in_near_sortedarray</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// arr 相邻的数不相等！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">oneMinIndex</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[<span class="number">0</span>] &lt; arr[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[N - <span class="number">1</span>] &lt; arr[N - <span class="number">2</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> N - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> N - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// L...R 肯定有局部最小</span></span><br><span class="line">        <span class="keyword">while</span> (L &lt; R - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (L + R) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &lt; arr[mid - <span class="number">1</span>] &amp;&amp; arr[mid] &lt; arr[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[mid] &gt; arr[mid - <span class="number">1</span>]) &#123;</span><br><span class="line">                    R = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    L = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[L] &lt; arr[R] ? L : R;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成随机数组，且相邻数不相等</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] randomArray(<span class="type">int</span> maxLen, <span class="type">int</span> maxValue) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * maxLen);</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[<span class="number">0</span>] = (<span class="type">int</span>) (Math.random() * maxValue);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    arr[i] = (<span class="type">int</span>) (Math.random() * maxValue);</span><br><span class="line">                &#125; <span class="keyword">while</span> (arr[i] == arr[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也用于测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> minIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> minIndex == -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> minIndex - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> minIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">leftBigger</span> <span class="operator">=</span> left &gt;= <span class="number">0</span> ? arr[left] &gt; arr[minIndex] : <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rightBigger</span> <span class="operator">=</span> right &lt; arr.length ? arr[right] &gt; arr[minIndex] : <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> leftBigger &amp;&amp; rightBigger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTime</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试开始&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; testTime; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] arr = randomArray(maxLen, maxValue);</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> oneMinIndex(arr);</span><br><span class="line">            <span class="keyword">if</span> (!check(arr, ans)) &#123;</span><br><span class="line">                printArray(arr);</span><br><span class="line">                System.out.println(ans);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对数器/生成随机数行为</title>
      <link href="/2023/02/09/algorithm/algorithm-random-generate-for-test/"/>
      <url>/2023/02/09/algorithm/algorithm-random-generate-for-test/</url>
      
        <content type="html"><![CDATA[<h1 id="随机数生成用于验证算法正确性"><a href="#随机数生成用于验证算法正确性" class="headerlink" title="随机数生成用于验证算法正确性"></a>随机数生成用于验证算法正确性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> com.day1.sort.insertionSort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayComparator</span> &#123;</span><br><span class="line">    <span class="comment">// for test  系统自带的绝对正确的数组排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">comparator</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for test  产生随机数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] generateRandomArray(<span class="type">int</span> maxSize, <span class="type">int</span> maxValue) &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[(<span class="type">int</span>) ((maxSize + <span class="number">1</span>) * Math.random())];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = (<span class="type">int</span>) ((maxValue + <span class="number">1</span>) * Math.random()) - (<span class="type">int</span>) (maxValue * Math.random());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for test 拷贝得到一样的数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] copyArray(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            res[i] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for test 比较两个数组的值是否完全一致</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((arr1 == <span class="literal">null</span> &amp;&amp; arr2 != <span class="literal">null</span>) || (arr1 != <span class="literal">null</span> &amp;&amp; arr2 == <span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr1 == <span class="literal">null</span> &amp;&amp; arr2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr1.length != arr2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr1[i] != arr2[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for test 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testTime</span> <span class="operator">=</span> <span class="number">500000</span>;  <span class="comment">//设置比较验证次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">//设置测试随机数组最大长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//设置数组内值的最大值</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">succeed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; testTime; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] arr1 = generateRandomArray(maxSize, maxValue);<span class="comment">//得到随机数组</span></span><br><span class="line">            <span class="type">int</span>[] arr2 = copyArray(arr1); <span class="comment">//得到随机数组拷贝份</span></span><br><span class="line">            insertionSort.insertionSort(arr1); <span class="comment">//用自己的排序算法排序</span></span><br><span class="line">            comparator(arr2);<span class="comment">//用绝对正确的方法排序</span></span><br><span class="line">            <span class="keyword">if</span> (!isEqual(arr1, arr2)) &#123; <span class="comment">//验证自己的算法和绝对正确的算法得到的结果是否相同</span></span><br><span class="line">                succeed = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(succeed ? <span class="string">&quot;Nice!&quot;</span> : <span class="string">&quot;Fucking fucked!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = generateRandomArray(maxSize, maxValue);</span><br><span class="line">        printArray(arr);<span class="comment">//排序前打印</span></span><br><span class="line">        insertionSort.insertionSort(arr);<span class="comment">//排序</span></span><br><span class="line">        printArray(arr);<span class="comment">//打印排序后结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="不等概率变成等概率"><a href="#不等概率变成等概率" class="headerlink" title="不等概率变成等概率"></a>不等概率变成等概率</h1><p>f()函数是生成0和1的函数，但是概率不相等，要求使用 f()函数生成一个 g()函数，g()函数生成0和1的概率相等.<br> 算法思路：将 f()函数执行两次，得到00和11都不要，重新生成，得到01返回0，得到10返回1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Random0_neq_1to0_eq_1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math . random ()&lt;<span class="number">0.84</span> ? <span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">g</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span><span class="number">0</span>; <span class="keyword">do</span> &#123;</span><br><span class="line">            ans = f ();</span><br><span class="line">        &#125; <span class="keyword">while</span> ( ans == f ());</span><br><span class="line">        <span class="keyword">return</span> ans ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数置换"><a href="#函数置换" class="headerlink" title="函数置换"></a>函数置换</h1><p>得到1到5随机数的函数fn()如何置换成获得1到7随机数的函数g(x)<br>一、从1到5随机数得到1到7随机数<br> 题设: 给定一个函数fn(), fn()会等概率得到1<del>5的随机数(整数)<br> 要求: 可以使用fn()但是不能更改fn(), 最终要等概率得到1</del>7的随机数(整数)<br> 解:<br> 1.先构造出01发生器<br> fn()会随机得到1~5， 那么定义如果得到1和2就返回0，得到4和5就返回1，得到3就重试，一直循环知道能得到2，4，5中的某一个数终止。<br> 假设01发生器函数为 f2();</p><p> 2.找到最终得到的最大数，用二进制形式表示出来<br> 最终需要得到1~7， 7为最大数，用二进制表示就是 000 ~ 111。总共有3位，每一位的值都是0或1。</p><p> 3.使用01发生器等概率得到000~111之间的数<br> int result &#x3D; (f2()&lt;&lt;2) + (f2()&lt;&lt;1) + f2();</p><p> 4.最终需要1~7，所以如果result&#x3D;0则重试，直到结果为1到7终止，这样就能得到1到7的等概率随机数了。</p><p> 二、推广到一般情况 根据a到b随机得到c到d随机数</p><p> 根据上面1到5随机数得到1到7的随机数可得<br> 1.先构造出01发生器<br> fn()会随机得到a~b<br> (1) 如果b-a+1是偶数，则得到左边一半的数即a到((a+b+1)&#x2F;2)-1就返回0，得到右边一半即((a+b+1)&#x2F;2)到b就返回1。<br> (2) 如果b-a+1是奇数，则得到左边一半a到((a+b)&#x2F;2-1)就返回0，得到右边一半即((a+b)&#x2F;2+1)到b就返回1，得到(a+b)&#x2F;2就重试。<br> 假设01发生器函数为 f2();</p><p> 2.找到最终得到的最大数，用二进制形式表示出来<br> 假设c&#x3D;13,d&#x3D;59<br> 最终需要得到c~d， d为最大数，则用二进制表示就是 000000 ~ 111111(0到63)。总共有6位，每一位的值都是0或1。</p><p> 3.使用01发生器等概率得到000000~111111之间的数<br> int result &#x3D; (f2()&lt;&lt;6) + (f2()&lt;&lt;5) + (f2()&lt;&lt;4) + (f2()&lt;&lt;3) + (f2()&lt;&lt;2) + f2();</p><p> 4.最终需要c~d，所以我们得到0到(d-c)的随机数在+c即可得到c到d的随机数<br> 即如果result&gt;d-c则重试，直到结果为0到d-c终止，这样就能得到0到d-c的等概率随机数了然后再加上c即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Random1_5to1_7</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">10000000</span>;</span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> g();</span><br><span class="line">            count[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;得到&quot;</span> + i + <span class="string">&quot;的次数:&quot;</span> + count[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以使用fn()但是不能更改fn(), 最终要等概率得到1~7的随机数(整数)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1~5的随机数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * <span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 01发生器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> fn()得到1和2就返回0，得到4和5就返回1，得到3就重试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            result = fn();</span><br><span class="line">        &#125; <span class="keyword">while</span> (result == <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> result &lt; <span class="number">3</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用二进制表示就是 000 ~ 111。总共有3位，每一位的值都是0或1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 000~111之间的数,即0~7之间的数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// f2() &lt;&lt; 2结果是100或000, f2() &lt;&lt; 1结果是010或000, f2()结果是001或000</span></span><br><span class="line">        <span class="keyword">return</span> (f2() &lt;&lt; <span class="number">2</span>) + (f2() &lt;&lt; <span class="number">1</span>) + f2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * f3()可以等概率得到0~7之间的数，遇到0重试就能等概率得到1~7之间的数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 1~7之间的数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">g</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            result = f3();</span><br><span class="line">        &#125; <span class="keyword">while</span> (result == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法/选择,插入,冒泡，归并和快速排序</title>
      <link href="/2023/02/09/algorithm/algorithm-quickstart-sort/"/>
      <url>/2023/02/09/algorithm/algorithm-quickstart-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="思考过程"><a href="#思考过程" class="headerlink" title="思考过程"></a>思考过程</h2><p>给定一个数组,[0,1,…..n-1]</p><ol><li>n个数选一个最小值，放在0位置</li><li>n-1个数选一个n-1个数中的最小值，放在1位置<br>……<br>直到整个数组有序。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort01_SelectSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SelectSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">minValueIndex</span> <span class="operator">=</span> <span class="number">0</span>; minValueIndex &lt; arr.length;minValueIndex++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> minValueIndex + <span class="number">1</span> ; j &lt; arr.length ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[minValueIndex] &gt; arr[j]) &#123;</span><br><span class="line">                    swap(arr,minValueIndex,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>每遍历一轮，找到最大或者最小值的下标，和第一个数交换，结束一轮运算，乱序数组减一，周而复始，直到整个数组有序。<br>分析一下数组选择排序时间复杂度：<br>第一次遍历：N*(取数+比较) + 1次交换<br>… (N-1)(取数+比较) + 1次交换<br>..<br>.<br>&#x3D; 2 * （N + (N-1) + … + 1） + N<br>&#x3D; 2*(aN^2 + bN + c) +N<br>&#x3D; 2aN^2 + (2b+1)N + 2c<br>&#x3D; aN^2 + bN + c<br>&#x3D; N^2<br>忽略低阶项和常数得到时间复杂度<br>&#x3D;&#x3D;&#x3D;&gt; O(n^2)<br>时间复杂度的意义： a算法：3_N^3 + 2_N^2 + 1 b算法：100w_N^2 + 500w_N + 1000w 当N→无穷大时，常数项就可以忽略，复杂度只与数据量有关。</p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="思考过程-1"><a href="#思考过程-1" class="headerlink" title="思考过程"></a>思考过程</h2><ol><li>n个数相邻两两比较，最大值冒泡到最右边</li><li>n-1个数相邻两两比较，最大值冒泡到n-1个数的最右边<br>……<br>直到整个数组有序</li></ol><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort02_BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> arr.length -<span class="number">1</span> ; end &gt; <span class="number">0</span>; end--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; end  ; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度分析-1"><a href="#时间复杂度分析-1" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>每遍历一轮，相邻的两个数比较交换，谁大谁在后面，直到找到最大或最小值，结束一轮运算，乱序数组减一，周而复始，直到整个数组有序。<br>分析：<br>第一次遍历 ： (N-1)*(比较+交换)<br>…<br>..<br>.<br>冒泡排序和选择排序对所有不同情况的数据样本，复杂度的表现都是一样的，O(N^2).</p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p> 一个数组，先让0-0范围有序，再让0-1范围内有序，周而复始，直到整个数组有序。 先局部有序，再逐一插入单个数。，类比打牌，把牌一个一个插入到前面有序的牌中。  </p><ol><li>指针停在0位置，[0]有序 </li><li>指针停在1位置, 与前面的数依次比较，小的放前面，直到[0,1]有序 </li><li>指针停在2位置, 与前面的数依次比较，小的放前面,指针左移一位，直到[0,1,2]有序 …… 直到整个数组有序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort03_InsertSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">1</span>; end &lt; arr.length; end++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> end;</span><br><span class="line">            <span class="keyword">while</span> (maxIndex - <span class="number">1</span>  &gt;= <span class="number">0</span> &amp;&amp; arr[maxIndex -<span class="number">1</span>] &gt; arr[maxIndex]) &#123;</span><br><span class="line">                swap(arr,maxIndex - <span class="number">1</span>, maxIndex);</span><br><span class="line">                maxIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//优化版本</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort2</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">1</span>; end &lt; arr.length; end++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> end - <span class="number">1</span>; pre &gt;= <span class="number">0</span> &amp;&amp; arr[pre] &gt; arr[pre + <span class="number">1</span>]; pre--) &#123;</span><br><span class="line">                swap(arr, pre, pre + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>建立的归并操作的基础上，稳定的排序算法，时间复杂度O(nlogn) . 先将每个子序列有序，再使子序列段间有序，最后合成一个有序序列。 又叫做二路归并。<br>*</p><h2 id="递归实现思路"><a href="#递归实现思路" class="headerlink" title="递归实现思路"></a>递归实现思路</h2><p>思考过程：</p><ol><li>保证左边数组有序</li><li>保证右边数组有序</li><li>合并左右两边数组使整个数组有序。</li></ol><ul><li>3.1 需要一个辅助数组来保存比较后的数</li></ul><h2 id="非递归实现思路"><a href="#非递归实现思路" class="headerlink" title="非递归实现思路"></a>非递归实现思路</h2><p>相比递归实现，非递归使用变化的步长(step)来代表拆分的子序列;</p><ol><li>步长为1时： [1][2][4][3][5][0] 交替 ，每个序列中只有一个数</li><li>步长为2时： [12][34][05] 交替 ， 第1步时的左右序列已合并变有序， 每个序列中有两个数</li><li>步长为4时： [1234][05] ，第2步时的左右序列已合并变为左序列且有序.</li><li>步长为8，超过数组本身长度，直接合并为一个序列，排序完毕。</li></ol><p>时间复杂度估算： 步长逼近N，需要O(logN)次，每一次所有数需要合并一次，所以是O(n) &#x3D;&#x3D;&gt; 所以复杂度为O(nlogn)</p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort04_MergeSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序递归实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSortByRecursive</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        process(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保证输入数组有序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> L , <span class="type">int</span> R)</span> &#123;</span><br><span class="line">        <span class="comment">//基线条件：: 只有一个元素时，结束</span></span><br><span class="line">        <span class="keyword">if</span> (L == R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 中间位置</span></span><br><span class="line">        <span class="comment">// int mid = (L + R) / 2 ，这种计算方法可能导致 L+ R超出整数范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> L + ((R - L) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//让左边数组全部有序</span></span><br><span class="line">        process(arr, L , mid);</span><br><span class="line">        <span class="comment">//让右边数组全部有序</span></span><br><span class="line">        process(arr, mid + <span class="number">1</span>, R);</span><br><span class="line">        <span class="comment">//合并左边和右边数组</span></span><br><span class="line">        merge(arr,L,mid,R);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并左组和右组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> L, <span class="type">int</span> M, <span class="type">int</span> R)</span> &#123;</span><br><span class="line">        <span class="comment">// 申请一个辅助数组合并左组和右组</span></span><br><span class="line">        <span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> L;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> M + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p1 &lt;= M &amp;&amp; p2 &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要么p1越界，要么p2越界，不可能出现同时越界</span></span><br><span class="line">        <span class="keyword">while</span> (p1 &lt;= M) &#123;</span><br><span class="line">            help[i++] = arr[p1++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p2 &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//合并数据回填</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; help.length; j++) &#123;</span><br><span class="line">            arr[L + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序非递归实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSortNotRecursive</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始步长为1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">while</span> (step &lt; N) &#123;</span><br><span class="line">            <span class="comment">// -- 调整步长 -- start</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (L &lt; N) &#123;</span><br><span class="line">                <span class="comment">//计算中点位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (N - L &gt;= step) &#123;</span><br><span class="line">                    M = L + step - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//只剩下左组的边界情况</span></span><br><span class="line">                    M = N - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// M到了N-1，说明没有右组</span></span><br><span class="line">                <span class="keyword">if</span> (M == N - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//算右组的个数 (N-1)-(M+1) + 1 = N-1-M</span></span><br><span class="line">                <span class="keyword">if</span> (N - <span class="number">1</span> - M &gt;= step) &#123;</span><br><span class="line">                    <span class="comment">// R能来到step位置</span></span><br><span class="line">                    R = M + step;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 凑不够右组</span></span><br><span class="line">                    R = N - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// M，R都算出来，合并左组和右组,算法和递归合并排序一致</span></span><br><span class="line">                merge(arr, L, M, R);</span><br><span class="line">                <span class="comment">//有可能 R+1越界</span></span><br><span class="line">                <span class="keyword">if</span> (R == N - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 下一个左组的位置</span></span><br><span class="line">                    L = R + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// -- 调整步长 -- end</span></span><br><span class="line">            <span class="comment">//边界考虑：步长超过数组本身长度，排序结束。防止step * 2 超过整数最大值</span></span><br><span class="line">            <span class="comment">// 为什么 step &gt;= N/2 不行， 因为n/2 是向下取整的。</span></span><br><span class="line">            <span class="comment">// 比如17个数，步长为8的时候，17/2 = 8 ,直接停了。</span></span><br><span class="line">            <span class="keyword">if</span> (step &gt; N / <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//增加步长*2</span></span><br><span class="line">            step *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="D-amp-C-思想"><a href="#D-amp-C-思想" class="headerlink" title="D &amp; C 思想"></a>D &amp; C 思想</h2><ol><li>基线条件：最简单的数组： 空数组或只有一个元素的数组，不需要排序直接返回。</li><li>缩小问题规模：选择基准值，把整个数组分解 [小于基准值 , 基准值, 大于基准值]</li></ol><h2 id="荷兰国旗问题"><a href="#荷兰国旗问题" class="headerlink" title="荷兰国旗问题"></a>荷兰国旗问题</h2><p>现在有若干个红、白、蓝三种颜色的球随机排列成一条直线。现在我们的任务是把这些球按照红、白、蓝排序。<br>红 &#x3D; 0 ，白 &#x3D; 1 ，蓝 &#x3D; 2<br>[0,1,2,1,0,2,1,0,2,1] &#x3D;&gt; 变成 [0,0,0,1,1,1,1,2,2,2]</p><h2 id="简单场景"><a href="#简单场景" class="headerlink" title="简单场景:"></a>简单场景:</h2><p>一个数组[x,x,x,p], 小于等于p的放左边,大于p的放右边</p><p>数组分为[Less区,待排序区,P], 初始化时,Less区大小为0, 指针从左往右移动,指向的数为当前数</p><ol><li>当前数 &lt;&#x3D; p(基准值),当前数和Less区外的下一个数做交换,Less区右扩,当前数跳下一个,越界了停止。</li><li>当前数 &gt; P(基准值),当前数直接跳下一个,越界了停止。</li></ol><h2 id="进阶场景"><a href="#进阶场景" class="headerlink" title="进阶场景:"></a>进阶场景:</h2><p>一个数组[x,x,x,x,x,p],小于p的放左边,等于p的放中间,大于p的放右边。<br>数组要分为三个区域,[Less区,待排序区,(More区,p)].</p><ol><li>当前数&lt; 基准值, 当前数与Less区的下个数做交换,Less区右扩, 当前数跳下一个。</li><li>当前数&gt; 基准值, 当前区与More区的前一个数做交换,More区向左扩,当前数不动(交换过还没看)。</li><li>当前数 &#x3D; 基准值，直接跳下一个。</li><li>最后,基准值和More区的第一个数换,排序结束</li></ol><h2 id="快排的递归实现"><a href="#快排的递归实现" class="headerlink" title="快排的递归实现"></a>快排的递归实现</h2><p>快排最小问题规模等价于荷兰国旗问题：一串数字,选一个数为基准值，把小于基准值的数放在它的左边，大于基准值的数放在它的右边。 要求时间复杂度为O(n)，并且只能使用有限几个变量<br>a. 先按单个数分层,返回单个数的左右边界.<br>b. 递归函数</p><h2 id="非递归版本思路"><a href="#非递归版本思路" class="headerlink" title="非递归版本思路"></a>非递归版本思路</h2><p>用Stack栈做任务,每一个最小任务就是一个荷兰国旗问题,还是使用partition方法来实现分层。</p><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sort05_QuickSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 实现场景: 一个数组[x,x,x,p], 小于等于p的放左边,大于p的放右边</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//方法效果:拿数组的最右一个数做基准值, 结果返回&lt;=该数放左边,&gt;=该数放右边。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">splitNum01</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//Less区的右边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lessEqualR</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当前指针下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//最右值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mostR</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; arr.length) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[index] &lt;= arr[mostR])&#123;</span><br><span class="line">                <span class="comment">//交换两个值</span></span><br><span class="line">                swap(arr,lessEqualR + <span class="number">1</span> , index);</span><br><span class="line">                lessEqualR++;</span><br><span class="line">                index++;</span><br><span class="line">                <span class="comment">//上三句可简写成一句</span></span><br><span class="line">                <span class="comment">//swap(arr,++lessEqualR,index++);</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *2.进阶场景: 一个数组[x,x,x,x,x,p],小于p的放左边,等于p的放中间,大于p的放右边。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">splitNum02</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//Less区的右边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lessR</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//more区的左边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">moreL</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当前指针下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//划分值下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">poivt</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; moreL) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[index] &lt; arr[poivt])&#123;</span><br><span class="line">                swap(arr,++lessR,index++);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>  (arr[index] &gt; arr[poivt])&#123;</span><br><span class="line">                swap(arr,--moreL,index);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第4步</span></span><br><span class="line">        swap(arr,moreL,poivt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3. 快速排序递归实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 先按单个数分层,返回单个数的左右边界.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> L</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> R</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//拿单个数来分层, 在arr[L...R]范围上,拿arr[R]做划分值</span></span><br><span class="line">    <span class="comment">//返回等于arr[R]区域的左右边界</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] partition(<span class="type">int</span>[] arr,<span class="type">int</span> L,<span class="type">int</span> R) &#123;</span><br><span class="line">        <span class="comment">//Less区的右边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lessR</span> <span class="operator">=</span> L-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//more区的左边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">moreL</span> <span class="operator">=</span> R;</span><br><span class="line">        <span class="comment">//当前指针下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> L;</span><br><span class="line">        <span class="comment">//划分值下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">poivt</span> <span class="operator">=</span> R;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; moreL) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[index] &lt; arr[poivt])&#123;</span><br><span class="line">                swap(arr,++lessR,index++);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>  (arr[index] &gt; arr[poivt])&#123;</span><br><span class="line">                swap(arr,--moreL,index);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第4步</span></span><br><span class="line">        swap(arr,moreL,poivt);</span><br><span class="line">        <span class="comment">//返回左右边界</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;lessR+<span class="number">1</span>,moreL&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSortByRecursive</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">        process(arr,<span class="number">0</span>,arr.length -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span>  L , <span class="type">int</span> R)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(L &gt;= R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span>[] equalRange = partition(arr,L,R);</span><br><span class="line">        <span class="comment">// equalRange[0],等于区域的第一个数</span></span><br><span class="line">        <span class="comment">// equalRange[1],等于区域的最后一个数</span></span><br><span class="line">        process(arr,L,equalRange[<span class="number">0</span>]-<span class="number">1</span>);</span><br><span class="line">        process(arr,equalRange[<span class="number">1</span>]+<span class="number">1</span>,R);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4. 快速排序非递归实现</span></span><br><span class="line"><span class="comment">     *  用Stack栈做任务,每一个最小任务就是一个荷兰国旗问题,还是使用partition方法来实现分层。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//任务定义</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> L;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> R;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Job</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">            L = left;</span><br><span class="line">            R = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSortByNotRecursive</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Job&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(<span class="keyword">new</span> <span class="title class_">Job</span>(<span class="number">0</span>, arr.length - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Job</span> <span class="variable">cur</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            <span class="type">int</span>[] equals = partition(arr, cur.L, cur.R);</span><br><span class="line">            <span class="keyword">if</span> (equals[<span class="number">0</span>] &gt; cur.L) &#123; <span class="comment">// 有&lt; 区域</span></span><br><span class="line">                stack.push(<span class="keyword">new</span> <span class="title class_">Job</span>(cur.L, equals[<span class="number">0</span>] - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (equals[<span class="number">1</span>] &lt; cur.R) &#123; <span class="comment">// 有 &gt; 区域</span></span><br><span class="line">                stack.push(<span class="keyword">new</span> <span class="title class_">Job</span>(equals[<span class="number">1</span>] + <span class="number">1</span>, cur.R));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows虚拟机安装的centos7网络配置</title>
      <link href="/2023/02/09/linux/centos7-network-config-in-win-vmware/"/>
      <url>/2023/02/09/linux/centos7-network-config-in-win-vmware/</url>
      
        <content type="html"><![CDATA[<h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h2><p>账户密码统一设置root&#x2F;123456</p><p>win的vmware8网卡地址信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">以太网适配器 VMware Network Adapter VMnet8:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::2d29:54ea:5091:dcf9%11</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.44.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br></pre></td></tr></table></figure><img src="/2023/02/09/linux/centos7-network-config-in-win-vmware/win-vmware-entwork-config.png" class="" title="win-vmware-entwork-config"><p>登录Linux修改配置：vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33<br>IP统一设置成静态IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=static</span><br><span class="line">ONBOOT=yes#网卡设备自动启动 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">网关，即第一步中设置的网关 ，在NAT设置中查看</span></span><br><span class="line">GATEWAY=192.168.44.2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">虚拟机的IP地址，在之前IP段可以随意设定，不能与网关相同</span> </span><br><span class="line">IPADDR=192.168.44.100</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">子网掩码</span> </span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DNS1，DNS<span class="comment"># 设定本机可用的DNS即可</span></span> </span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DNS2</span></span><br><span class="line">DNS2=114.114.114.114</span><br></pre></td></tr></table></figure><p>设置成功后，重启网卡<code>service network restart</code></p><h2 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h2><p>已有centos7重新安装一遍费时费力,不想重新安装，可以使用克隆功能。</p><ol><li>使用 <code>uuidgen</code>命令生成uuid并保存下来。</li><li>打开&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33文件，替换新额uuid，然后修改IPADDR&#x3D;192.168.44.101 （后面可以依次设置自增的ip）， 本人做实验约定从192.168.44.100开始。</li></ol><h2 id="系统网络设置"><a href="#系统网络设置" class="headerlink" title="系统网络设置"></a>系统网络设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置主机名</span></span></span><br><span class="line">hostnamectl set-hostname  自定义的主机名  &amp;&amp;  bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置本机的ip到主机名的映射关系</span></span></span><br><span class="line">192.168.44.101  自定义主机名</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 关闭防火墙</span></span></span><br><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 关闭selinx(安全增强型 Linux(Security-Enhanced Linux)</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 简称 SELinux，它是一个 Linux 内核模块，也是 Linux 的一个安全子系统)</span></span></span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">    SELINUX=disabled</span><br></pre></td></tr></table></figure><p>centos7关闭防火墙有所区别</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><h2 id="解决设置了静态IP后-系统IP还是自动发生变化"><a href="#解决设置了静态IP后-系统IP还是自动发生变化" class="headerlink" title="解决设置了静态IP后,系统IP还是自动发生变化"></a>解决设置了静态IP后,系统IP还是自动发生变化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 禁用NetworkManager服务</span></span></span><br><span class="line">service NetworkManager status</span><br><span class="line">systemctl stop NetworkManager.service</span><br><span class="line">systemctl disable NetworkManager.service</span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS命令行安装MySQL数据库(联网实验环境)</title>
      <link href="/2023/02/08/database/mysql-install-in-centos7/"/>
      <url>/2023/02/08/database/mysql-install-in-centos7/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux下mysql的彻底卸载"><a href="#Linux下mysql的彻底卸载" class="headerlink" title="Linux下mysql的彻底卸载"></a>Linux下mysql的彻底卸载</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 1、查看mysql的安装情况</span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"># 2、删除上图安装的软件</span><br><span class="line">rpm -ev mysql-community-libs-5.7.27-1.el6.x86_64 --nodeps</span><br><span class="line"># 3、都删除成功之后，查找相关的mysql的文件</span><br><span class="line">find / -name mysql</span><br><span class="line"># 4、删除全部文件</span><br><span class="line">rm -rf /var/lib/mysql</span><br><span class="line">rm -rf /var/lib/mysql/mysql</span><br><span class="line">rm -rf /etc/logrotate.d/mysql</span><br><span class="line">rm -rf /usr/share/mysql</span><br><span class="line">rm -rf /usr/bin/mysql</span><br><span class="line">rm -rf /usr/lib64/mysql</span><br><span class="line"># 5、再次执行命令</span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line">#如果没有显式则表示卸载完成</span><br></pre></td></tr></table></figure><h1 id="MYSQL5-7详细安装步骤"><a href="#MYSQL5-7详细安装步骤" class="headerlink" title="MYSQL5.7详细安装步骤"></a>MYSQL5.7详细安装步骤</h1><p>0、更换yum源<br>0.1、打开 mirrors.aliyun.com，选择centos的系统，点击帮助 <a href="https://developer.aliyun.com/mirror/centos">https://developer.aliyun.com/mirror/centos</a><br>0.2、执行命令：yum install wget -y<br>0.3、改变某些文件的名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><p>0.4、执行更换yum源的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><p>0.5、更新本地缓存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p>1、查看系统中是否自带安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep mysql</span><br></pre></td></tr></table></figure><p>2、删除系统自带的mysql及其依赖（防止冲突）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove mysql-libs.x86_64</span><br></pre></td></tr></table></figure><p>3、安装wget命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget -y</span><br></pre></td></tr></table></figure><p>4、给CentOS添加rpm源，并且选择较新的源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm</span><br></pre></td></tr></table></figure><p>5、安装下载好的rpm文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-release-el6-5.noarch.rpm -y</span><br></pre></td></tr></table></figure><p>6、安装成功之后，会在&#x2F;etc&#x2F;yum.repos.d&#x2F;文件夹下增加两个文件</p><img src="/2023/02/08/database/mysql-install-in-centos7/two-config.png" class="" title="two-config"><p>7、修改mysql-community.repo文件</p><img src="/2023/02/08/database/mysql-install-in-centos7/modify-mysql-community-repo-config.png" class="" title="modify-mysql-community-repo-config"><p><code>注意</code>：修改enabled属性上的url 数字6为数字7 ， 代表centos的大版本。</p><p>8、使用yum安装mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server -y</span><br></pre></td></tr></table></figure><p>9、启动mysql服务并设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动之前需要生成临时密码，需要用到证书，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可能证书过期，需要进行更新操作</span></span><br><span class="line">yum update -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动mysql服务</span></span><br><span class="line">service mysqld start</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置mysql开机启动</span></span><br><span class="line">chkconfig mysqld on</span><br></pre></td></tr></table></figure><p>10、获取mysql的临时密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>11、使用临时密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入密码</span></span><br></pre></td></tr></table></figure><p>12、修改密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CentOS安装完MySQL修改默认密码时出现了如下错误:</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br><span class="line"></span><br><span class="line">原因是因为密码设置的过于简单会报错,MySQL有密码设置的规范</span><br><span class="line"></span><br><span class="line">查看MySQL完整的初始密码规则,登陆后执行以下命令</span><br><span class="line">SHOW VARIABLES LIKE &#x27;validate<span class="emphasis">_password%&#x27;;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">密码的长度是由validate_</span>password<span class="emphasis">_length决定的,但是可以通过以下命令修改</span></span><br><span class="line"><span class="emphasis">set global validate_</span>password<span class="emphasis">_length=4;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">validate_</span>password<span class="emphasis">_policy决定密码的验证策略,默认等级为MEDIUM(中等),可通过以下命令修改为LOW(低)</span></span><br><span class="line"><span class="emphasis">set global validate_</span>password<span class="emphasis">_policy=0;</span></span><br></pre></td></tr></table></figure><p>13、修改远程访问权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>14、设置字符集为utf-8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SHOW VARIABLES LIKE <span class="string">&#x27;character%&#x27;</span>;</span></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | latin1                     |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>修改配置文件 : <code>vi /etc/my.cnf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在[mysqld]部分添加：</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在文件末尾新增[client]段，并在[client]段添加：</span></span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><ol start="15"><li>查看MySQL版本</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost my.cnf.d]# mysql -V</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.40, for Linux (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7离线安装docker环境并导入离线镜像服务</title>
      <link href="/2023/02/08/devops/docker-offline-install-in-centos7/"/>
      <url>/2023/02/08/devops/docker-offline-install-in-centos7/</url>
      
        <content type="html"><![CDATA[<h1 id="docker18-09-9安装"><a href="#docker18-09-9安装" class="headerlink" title="docker18.09.9安装"></a>docker18.09.9安装</h1><ol><li>复制docker-18.09.9.tgz到服务器上 &#x2F;root路径，解压：tar xzvf docker-18.09.9.tgz ，得到一个docker文件夹</li></ol><p>docker安装包下载地址：<a href="https://download.docker.com/linux/static/stable/x86_64/">https://download.docker.com/linux/static/stable/x86_64/</a></p><ol start="2"><li><p>cp docker&#x2F;* &#x2F;usr&#x2F;bin&#x2F;  把docker程序拷贝到系统路径</p></li><li><p>添加docker开机启动<br><code>vim /etc/systemd/system/docker.service</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Delegate=yes</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ol><p>给文件赋执行权限 ： <code>chmod +x /etc/systemd/system/docker.service</code></p><p>重新加载系统配置：<code>systemctl daemon-reload </code></p><p>设置docker开机启动：<code>systemctl enable docker.service</code><br>启动docker ： <code>systemctl start docker</code><br>检查docker运行状态： <code>systemctl status docker</code></p><h1 id="加固服务镜像安装"><a href="#加固服务镜像安装" class="headerlink" title="加固服务镜像安装"></a>加固服务镜像安装</h1><p>镜像文件target.tar上传到服务器之后核对md5</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@szc50252 ~]# md5sum target</span><br><span class="line">eaf89359017ee3d9d8d4b4a058e83a27  target</span><br></pre></td></tr></table></figure><p>加载镜像到docker容器 : <code>docker load -i target</code></p><p>验证是否加载成功：<code>docker image ls</code></p><p>启动服务：<code>docker run -d -v --rm -p 8888:80 -v /home/work/data:/app/data target:version</code></p>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写Dockerfile制作nginx和tomcat服务Docker镜像</title>
      <link href="/2023/02/07/devops/docker-nginx-tomcat-images-generate/"/>
      <url>/2023/02/07/devops/docker-nginx-tomcat-images-generate/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署Nginx"><a href="#Docker部署Nginx" class="headerlink" title="Docker部署Nginx"></a>Docker部署Nginx</h1><p>通过Docker部署Nginx服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动centos容器</span></span></span><br><span class="line">docker run --name nginx-m -p 80 -itd centos</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入容器内部</span></span></span><br><span class="line">docker exec -it nginx-m /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 确定ip</span></span></span><br><span class="line">ip addr  # 172.17.0.2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#  安装wget和nginx</span></span></span><br><span class="line">yum install -y wget</span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><blockquote><p>begin 出现错误：Failed to download metadata for repo ‘AppStream’</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 执行如下命令解决</span></span></span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line">sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line">yum update -y</span><br></pre></td></tr></table></figure><p>创建web页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#  安装文本编辑器</span></span></span><br><span class="line">yum install vim-enhanced -y</span><br><span class="line"></span><br><span class="line">mkdir /var/www/html -p</span><br><span class="line">cd /var/www/html/</span><br><span class="line">vi index.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;title&gt;nginx in docker&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;h1&gt;hello,My Name is lessismore&lt;/h1&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>修改 nginx 配置文件中的 root 路径，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line">root /var/www/html/;</span><br></pre></td></tr></table></figure><p>启动 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/nginx</span><br></pre></td></tr></table></figure><p>访问测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># exit容器外访问</span></span></span><br><span class="line">docker ps | grep nginx-m</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看端口号后</span></span></span><br><span class="line">curl http:locahost:ip</span><br><span class="line"></span><br><span class="line">也可以访问容器ip</span><br><span class="line">curl http://172.17.0.2:80</span><br></pre></td></tr></table></figure><h1 id="Docker部署Tomcat"><a href="#Docker部署Tomcat" class="headerlink" title="Docker部署Tomcat"></a>Docker部署Tomcat</h1><p>下载jdk：wget <a href="https://d6.injdk.cn/oraclejdk/8/jdk-8u341-linux-x64.rpm">https://d6.injdk.cn/oraclejdk/8/jdk-8u341-linux-x64.rpm</a><br>下载tomcat：wget <a href="https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.83/bin/apache-tomcat-8.5.83.tar.gz">https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.83/bin/apache-tomcat-8.5.83.tar.gz</a></p><p>编写Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vi dockerfile</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基础镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制jdk</span></span><br><span class="line">ADD jdk-8u341-linux-x64.rpm /usr/local/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制并解压tomcat</span></span><br><span class="line">ADD apache-tomcat-8.5.83.tar.gz /usr/local/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装jdk</span></span><br><span class="line">RUN cd /usr/local &amp;&amp; rpm -ivh jdk-8u341-linux-x64.rpm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名tomcat</span></span><br><span class="line">RUN mv /usr/local/apache-tomcat-8.5.83 /usr/local/tomcat8</span><br><span class="line">EXPOSE 8080</span><br></pre></td></tr></table></figure><p>创建并启动容器，验证是否启动成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器</span></span><br><span class="line">docker build -t=&quot;tomcat8:v1&quot; .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器</span></span><br><span class="line">docker run --name tomcat8 -itd -p 8080 tomcat8:v1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入运行中容器</span></span><br><span class="line">docker exec -it tomcat8 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动tomcat</span></span><br><span class="line">/usr/local/tomcat8/bin/startup.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问测试</span></span><br><span class="line">curl localhost:8080</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础学习笔记</title>
      <link href="/2023/02/07/devops/docker-quickstart-note/"/>
      <url>/2023/02/07/devops/docker-quickstart-note/</url>
      
        <content type="html"><![CDATA[<h1 id="各平台安装"><a href="#各平台安装" class="headerlink" title="各平台安装"></a>各平台安装</h1><h2 id="Mac-brew-安装-docker"><a href="#Mac-brew-安装-docker" class="headerlink" title="Mac brew 安装 docker"></a>Mac brew 安装 docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 先卸载</span></span></span><br><span class="line">brew uninstall docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装</span></span></span><br><span class="line">brew install --cask --appdir=/Applications docker</span><br></pre></td></tr></table></figure><h2 id="Liunx-CentOS7-环境安装Docker"><a href="#Liunx-CentOS7-环境安装Docker" class="headerlink" title="Liunx CentOS7 环境安装Docker"></a>Liunx CentOS7 环境安装Docker</h2><p>Linux设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 配置主机名</span></span></span><br><span class="line">hostnamectl set-hostname centos &amp;&amp; bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 关闭防火墙</span></span></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 关闭 iptables 防火墙</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装 iptables</span></span><br><span class="line">yum install iptables-services -y </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 禁用 iptables</span></span></span><br><span class="line">service iptables stop &amp;&amp; systemctl disable iptables</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 清空防火墙规则</span></span></span><br><span class="line">iptables -F</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭 selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：修改 selinux 配置文件之后，重启机器，selinux 才能永久生效</span></span><br><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示 Disabled 表示 selinux 关闭成功</span></span><br><span class="line">getenforce</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置时间同步</span></span><br><span class="line">yum install -y ntp ntpdate</span><br><span class="line">ntpdate cn.pool.ntp.org</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编写计划任务</span></span><br><span class="line">crontab -e</span><br><span class="line">* */1 * * * /usr/sbin/ntpdate cn.pool.ntp.org</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启 crond 服务使配置生效</span></span><br><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><p>Docker及其依赖安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装基础软件包</span></span></span><br><span class="line">yum install -y wget net-tools nfs-utils lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip sudo ntp libaio-devel wget vim ncurses-devel autoconf automake zlib-devel python-devel epel-release openssh-server socat ipvsadm conntrack</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># yum-config-manager 命令在utils里</span></span></span><br><span class="line">yum -y install yum-utils</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装 docker-ce</span></span><br><span class="line">配置 docker-ce 国内 yum 源（阿里云）</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 docker 依赖包</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装 docker-ce</span></span></span><br><span class="line">yum install docker-ce -y</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动 docker 服务</span></span><br><span class="line">systemctl start docker &amp;&amp; systemctl enable docker</span><br><span class="line"></span><br><span class="line">systemctl status docker</span><br><span class="line">看到 running，表示 docker 正常运行</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line"> Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset:</span><br><span class="line">disabled)</span><br><span class="line"> Active: active (running) since Thu 2021-07-01 21:29:18 CST; 30s ago</span><br><span class="line"> Docs: https://docs.docker.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看 Docker 版本信息</span></span><br><span class="line">docker version </span><br></pre></td></tr></table></figure><p>开启包转发功能和修改内核参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核参数修改：br_netfilter 模块用于将桥接流量转发至 iptables 链，br_netfilter 内核参数需要开</span></span><br><span class="line">启转发。</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/sysctl.d/docker.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使参数生效</span></span><br><span class="line">sysctl -p /etc/sysctl.d/docker.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启后模块失效，下面是开机自动加载模块的脚本 ,在/etc/新建 rc.sysinit 文件</span></span><br><span class="line">vi /etc/rc.sysinit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for file in /etc/sysconfig/modules/*.modules ; do</span><br><span class="line">[ -x $file ] &amp;&amp; $file</span><br><span class="line">done </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在/etc/sysconfig/modules/目录下新建文件如下</span></span><br><span class="line">vi /etc/sysconfig/modules/br_netfilter.modules</span><br><span class="line">modprobe br_netfilter</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加权限</span></span><br><span class="line">chmod 755 /etc/sysconfig/modules/br_netfilter.modules</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启机器模块也会自动加载</span></span><br><span class="line">lsmod |grep br_netfilter</span><br><span class="line"></span><br><span class="line">br_netfilter 22209 0</span><br><span class="line">bridge 136173 1 br_netfilter</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">Docker 安装后出现：WARNING: bridge-nf-call-iptables is disabled 的解决办法：</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1：</span><br><span class="line">将 Linux 系统作为路由或者 VPN 服务就必须要开启 IP 转发功能。当 linux 主机有多个网卡时一个网卡收</span><br><span class="line">到的信息是否能够传递给其他的网卡 ，如果设置成 1 的话 可以进行数据包转发，可以实现 VxLAN 等功</span><br><span class="line">能。不开启会导致 docker 部署应用无法访问。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启 docker</span></span><br><span class="line">systemctl restart docker  </span><br></pre></td></tr></table></figure><p>配置docker镜像加速器ß<br>登陆阿里云镜像仓库<br><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a><br>如果没有开通，可开通阿里云的镜像服务<br>找到加速器地址，执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 写入加速的镜像地址</span></span></span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;:[&quot;https://mcmje5nr.mirror.aliyuncs.com&quot;,&quot;https://registry.dockercn.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;,&quot;https://dockerhub.azk8s.cn&quot;,&quot;http://hubmirror.c.163.com&quot;]</span><br><span class="line">&#125; </span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 让配置文件生效</span></span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="镜像和容器命令"><a href="#镜像和容器命令" class="headerlink" title="镜像和容器命令"></a>镜像和容器命令</h1><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># dockerhub查找镜像</span></span></span><br><span class="line">docker search centos</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># ---------</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#解释说明：</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#NAME: 镜像仓库源的名称</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#DESCRIPTION: 镜像的描述</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#OFFICIAL: 是否 docker 官方发布</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#stars: 类似 Github 里面的 star，表示点赞、喜欢的意思。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#AUTOMATED: 自动构建。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># ----------</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 下载镜像</span></span></span><br><span class="line">docker pull centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看本地镜像</span></span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 把镜像做成离线压缩包</span></span></span><br><span class="line">docker save -o centos.tar.gz centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 解压离线镜像包</span></span></span><br><span class="line">docker load -i centos.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除镜像</span></span></span><br><span class="line">docker rmi -f centos:latest</span><br></pre></td></tr></table></figure><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 以交互方式启动并进入容器，输入 exit，退出容器，退出之后容器也会停止，不会再前台运行</span></span></span><br><span class="line">docker run --name=hello -it centos /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># ------</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># docker run 运行并创建容器</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># --name 容器的名字</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># -i 交互式</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># -t 分配伪终端</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># centos: 启动 docker 需要的镜像</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># /bin/bash 说明你的 shell 类型为 bash，bash shell 是最常用的一种 shell,</span></span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 是大多数 Linux 发行版默认的 shell。 此外还有 C shell 等其它 shell。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># -------</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 以守护进程的方式启动容器，-d 在后台运行 docker</span></span></span><br><span class="line">docker run --name=hello-d -td centos</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看正在运行的容器</span></span></span><br><span class="line">docker ps | grep hello-d</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看所有运行中的容器</span></span></span><br><span class="line">docker ps </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看所有容器，运行中和历史运行过已经停止的</span></span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 停止容器</span></span></span><br><span class="line">docker stop hello-d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动已经停止的容器</span></span></span><br><span class="line">docker start hello-d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入正在运行的容器</span></span></span><br><span class="line">docker exec -it hello-d /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 删除容器</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 强制删除</span></span></span><br><span class="line">docker rm -f hello-d</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 停止后删除</span></span></span><br><span class="line">docker rm hello-d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 帮助命令</span></span></span><br><span class="line">docker --help</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入容器修改了内部文件，如何保存成新的镜像</span></span></span><br><span class="line">docker commit -a &quot;作者&quot; -m &quot;提交信息描述&quot; 需保存的容器id  新镜像名称</span><br></pre></td></tr></table></figure><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。基于 Dockerfile 构建镜像可以使用 docker build 命令。docker build 命令中使用-f 可以指定具体的dockerfile 文件</p><h2 id="Dockerfile例子"><a href="#Dockerfile例子" class="headerlink" title="Dockerfile例子"></a>Dockerfile例子</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER lessismore</span><br><span class="line">RUN yum install wget -y</span><br><span class="line">RUN yum install nginx -y</span><br><span class="line">COPY index.html /usr/share/nginx/html/</span><br><span class="line">EXPOSE 80</span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure><h2 id="指令介绍"><a href="#指令介绍" class="headerlink" title="指令介绍"></a>指令介绍</h2><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>基础镜像，必须是可以下载下来的，定制的镜像都是基于 FROM 的镜像，这里的 centos 就是定制需要的基础镜像。后续的操作都是基于 centos 镜像。</p><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>指定镜像的作者信息</p><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>指定在当前<code>镜像构建过程中运行</code>的命令, 包含两种模式：</p><ol><li>shell模式 RUN (shell 模式，这个是最常用的，需要记住) eg: RUN echo hello </li><li>exec模式 RUN [“executable”，“param1”，“param2”] (exec 模式) <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN [“/bin/bash”,”-c”,”echo hello”] 等价于/bin/bash -c echo hello</span><br></pre></td></tr></table></figure></li></ol><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>仅仅只是声明端口。作用：</p><ol><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射 </li><li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。 </li><li>可以是一个或者多个端口，也可以指定多个 EXPOSE <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：EXPOSE &lt;端口 1&gt; [&lt;端口 2&gt;...]</span><br></pre></td></tr></table></figure></li></ol><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p><ol><li>CMD 在 docker run 时运行 </li><li>RUN 是在 docker build 构建镜像时运行的<br>作用：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 <code>docker run</code> 启动命令行参数中指定要运行的程序所覆盖。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMD[“executable”，“param1”，“param2”]   (exec 模式）</span><br><span class="line">CMD command （shell 模式）</span><br><span class="line">CMD [“param1”,”param2”]   作为 ENTRYPOINT 指令的默认参数</span><br></pre></td></tr></table></figure></li></ol><h3 id="ENTERYPOINT"><a href="#ENTERYPOINT" class="headerlink" title="ENTERYPOINT"></a>ENTERYPOINT</h3><p>类似于 CMD 指令，但其<code>不会被 docker run 启动命令行参数指定的指令所覆盖</code>，而且这些命令行参数会被 当作参数送给 ENTRYPOINT 指令指定的程序。但是, 如果运行 docker run 时使用了 –entrypoint 选项，将覆盖 entrypoint 指令指定的程序。</p><p>优点：在执行 <code>docker run</code> 的时候可以指定 ENTRYPOINT 运行所需的参数。注意：如果 Dockerfile 中如果<code>存在多个 ENTRYPOINT 指令</code>，<code>仅最后一个生效</code>。格式：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTERYPOINT [“executable”,“param1”,“param2”]   (exec 模式)   </span><br><span class="line">ENTERYPOINT command （<span class="keyword">shell</span><span class="language-bash"> 模式）</span></span><br></pre></td></tr></table></figure><p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参,示例说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假设已通过 Dockerfile 构建了 nginx-cmd:v1 镜像：</span><br><span class="line">FROM nginx-cmd:v1</span><br><span class="line">ENTRYPOINT [&quot;nginx&quot;, &quot;-c&quot;] # 定参</span><br><span class="line">CMD [&quot;/etc/nginx/nginx.conf&quot;] # 变参</span><br></pre></td></tr></table></figure><p>不传参运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run nginx-cmd:v1</span><br><span class="line">容器内会默认运行以下命令，启动主进程。</span><br><span class="line">nginx -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>传参运行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run nginx-cmd:v1 -c /etc/nginx/new.conf</span><br><span class="line">容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)</span><br><span class="line">nginx -c /etc/nginx/new.conf</span><br></pre></td></tr></table></figure><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY&lt;src&gt;..&lt;dest&gt;</span><br><span class="line">COPY[“&lt;src&gt;”...“&lt;dest&gt;”]</span><br></pre></td></tr></table></figure><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。<br>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径 1&gt;... &lt;目标路径&gt;</span><br><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径 1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</span><br><span class="line"></span><br><span class="line">[--chown=&lt;user&gt;:&lt;group&gt;]：可选参数，用户改变复制到容器内文件的拥有者和属组。</span><br></pre></td></tr></table></figure><p>&lt;源路径&gt;：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY hom?.txt /mydir/</span><br></pre></td></tr></table></figure><p>&lt;目标路径&gt;：容器内的指定路径，该路径不用事先建好，<code>路径不存在的话，会自动创建</code>。</p><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ADD &lt;src&gt;...&lt;dest&gt;</span><br><span class="line">ADD [“&lt;src&gt;”...“&lt;dest&gt;”]</span><br></pre></td></tr></table></figure><p>ADD 指令和 COPY 的使用格式一致（同样需求下，<code>官方推荐使用 COPY</code>）。功能也类似，不同之处如下：</p><ol><li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下， 会<code>自动复制并解压</code>到 &lt;目标路径&gt;。</li><li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像 构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。<blockquote><p><code>ADD vs COPY</code> ADD 包含类似 tar 的解压功能 如果单纯复制文件，dockerfile 推荐使用 COPY</p></blockquote></li></ol><p>示例演示：拷贝本地的index.html替换容器内部的index.html</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 替换/usr/share/nginx 下的 index.html</span></span></span><br><span class="line">vi dockerfile</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER xianchao</span><br><span class="line">RUN yum install wget -y</span><br><span class="line">RUN yum install nginx -y</span><br><span class="line">COPY index.html /usr/share/nginx/html/</span><br><span class="line">EXPOSE 80</span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br></pre></td></tr></table></figure><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。<br>作用：</p><ol><li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li><li>避免容器不断变大。</li></ol><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;&lt;路径 1&gt;&quot;, &quot;&lt;路径 2&gt;&quot;...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure><p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [“/data”]</span><br></pre></td></tr></table></figure><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作 目录，必须是提前创建好的）。<br>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才 会一直存在。<br>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR &lt;工作目录路径&gt; </span><br><span class="line">WORKDIR /path/to/workdir （填写绝对路径）</span><br></pre></td></tr></table></figure><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key&gt;=&lt;value&gt;...</span><br></pre></td></tr></table></figure><p>以下示例设置 NODE_VERSION &#x3D;6.6.6， 在后续的指令中可以通过 $NODE_VERSION 引用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENV NODE_VERSION 6.6.6</span><br><span class="line"></span><br><span class="line">RUN curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot; \</span><br><span class="line">&amp;&amp; curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;</span><br></pre></td></tr></table></figure><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已 经存在）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br><span class="line"></span><br><span class="line">USER daemon</span><br><span class="line">USER nginx</span><br><span class="line">USER user</span><br><span class="line">USER uid</span><br><span class="line">USER user:group</span><br><span class="line">USER uid:gid</span><br><span class="line">USER user:gid</span><br><span class="line">USER uid:group</span><br></pre></td></tr></table></figure><h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜 像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。<br>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD &lt;其它指令&gt;</span><br></pre></td></tr></table></figure><blockquote><p>用途：为镜像添加触发器 当一个镜像被其他镜像作为基础镜像时需要写上 OBNBUILD 会在构建时插入触发器指令</p></blockquote><p>演示示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 第一个镜像，执行dockerfile时不会执行index.html的拷贝 ，生成的镜像名假设为onbuild-nginx:v1</span></span></span><br><span class="line">vim dockerfile</span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER lessismore</span><br><span class="line">RUN yum install wget -y</span><br><span class="line">RUN yum install nginx -y</span><br><span class="line">ONBUILD COPY index.html /usr/share/nginx/html/</span><br><span class="line">EXPOSE 80</span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 第二个镜像FROM引用的是第一个镜像时 onbuild-nginx:v1,则会执行index.html文件的拷贝</span></span></span><br><span class="line">vim dockerfile</span><br><span class="line">FROM onbuild-nginx:v1</span><br><span class="line">MAINTAINER lessismore</span><br><span class="line">ENTRYPOINT [&quot;/usr/sbin/nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><p>LABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure><p>比如我们可以添加镜像的作者：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL org.opencontainers.image.authors=&quot;lessismore&quot;</span><br></pre></td></tr></table></figure><h3 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h3><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。<br>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span><br><span class="line">HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span><br></pre></td></tr></table></figure><p>HEALTHCHECK [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</p><h3 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h3><p>构建参数，与 <code>ENV</code> 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就 是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。<br>构建命令 docker build 中可以用 –build-arg &lt;参数名&gt;&#x3D;&lt;值&gt; 来覆盖。 格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARG &lt;参数名&gt;[=&lt;默认值&gt;]</span><br></pre></td></tr></table></figure><h1 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h1><h2 id="Docker-容器的数据管理"><a href="#Docker-容器的数据管理" class="headerlink" title="Docker 容器的数据管理"></a>Docker 容器的数据管理</h2><h3 id="什么是Docker容器的数据卷？"><a href="#什么是Docker容器的数据卷？" class="headerlink" title="什么是Docker容器的数据卷？"></a>什么是Docker容器的数据卷？</h3><p> 数据卷是经过特殊设计的目录，可以绕过联合文件系统（UFS），为一个或者多个容器提供访问，数据卷设计的目的，在于数据的永久存储，它完全独立于容器的生存周期，因此，docker 不会在容器删除时删 除其挂载的数据卷，也不会存在类似的垃圾收集机制，对容器引用的数据卷进行处理，同一个数据卷可以支持多个容器的访问。</p><h3 id="数据卷的特点"><a href="#数据卷的特点" class="headerlink" title="数据卷的特点"></a>数据卷的特点</h3><ol><li>数据卷在容器启动时初始化，如果容器使用的镜像在挂载点包含了数据，这些数据会被拷贝到新初始 化的数据卷中</li><li>数据卷可以在容器之间共享和重用</li><li>可以对数据卷里的内容直接进行修改</li><li>数据卷的变化不会影像镜像的更新</li><li>卷会一直存在，即使挂载数据卷的容器已经被删除</li></ol><h3 id="数据卷的使用"><a href="#数据卷的使用" class="headerlink" title="数据卷的使用"></a>数据卷的使用</h3><ol><li>为容器添加数据卷</li></ol><p>创建一个数据卷,数据存储在宿主机默认docker目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name data -v /opt/data -t -i centos /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看数据存储的目录</span></span></span><br><span class="line">docker inspect data|grep /var/lib/docker/volumes</span><br><span class="line"></span><br><span class="line">&quot;Source&quot;: &quot;/var/lib/docker/volumes/89d6562b9c1fe10dd21707cb697a5d481b3c1b000a69b762f540fa826a16972a/_data&quot;,</span><br></pre></td></tr></table></figure><p>创建一个数据卷，数据存储在宿主机指定的映射目录 ~&#x2F;datavolume</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /datavolume:/data -it centos /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 示例</span></span></span><br><span class="line">docker run --name volume -v ~/datavolume:/data -itd centos /bin/bash</span><br></pre></td></tr></table></figure><p>注：~&#x2F;datavolume 为宿主机目录，&#x2F;data 为 docker 启动的 volume 容器的里的目录 这样在宿主机的&#x2F;datavolume 目录下创建的数据就会同步到容器的&#x2F;data 目录下<br>为数据卷添加访问权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name volume1 -v ~/datavolume1:/data:ro -itd centos /bin/bash</span><br></pre></td></tr></table></figure><p>添加只读权限之后在 docker 容器的&#x2F;data 目录下就不能在创建文件了，为只读权限；在宿主机下的 &#x2F;datavolume1 下可以创建东西</p><ol start="2"><li>使用 dockerfile 构建包含数据卷的镜像</li></ol><h2 id="Docker数据卷容器"><a href="#Docker数据卷容器" class="headerlink" title="Docker数据卷容器"></a>Docker数据卷容器</h2><h3 id="什么是数据卷容器？"><a href="#什么是数据卷容器？" class="headerlink" title="什么是数据卷容器？"></a>什么是数据卷容器？</h3><p>命名的容器挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器，就叫做数据卷 容器。<br>挂载数据卷容器的方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --volumes-from [container name]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># （volume 这个镜像是上面创建的带两个数据卷/datavolume3 和/ddatavolume6 的镜像）</span></span></span><br><span class="line">docker run --name data-volume -itd volume</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># （进入到容器中）</span></span></span><br><span class="line">docker exec -it data-volume /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 创建文件</span></span></span><br><span class="line">touch /datavolume6/lucky.txt</span><br><span class="line">退出容器 exit </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 创建一个新容器挂载刚才 data-volume 这个容器创建的数据卷</span></span></span><br><span class="line">docker run --name data-volume2 --volumes-from data-volume -itd centos /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入到新创建的容器</span></span></span><br><span class="line">docker exec -it data-volume2 /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看容器的/datavolume6 目录下是否新创建了 lucky.txt 文件</span></span></span><br><span class="line">cd /datavolume6</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 可以看见有刚才在上一个容器创建的文件 lucky.txt</span></span></span><br></pre></td></tr></table></figure><h2 id="docker-数据卷的备份和还原"><a href="#docker-数据卷的备份和还原" class="headerlink" title="docker 数据卷的备份和还原"></a>docker 数据卷的备份和还原</h2><h3 id="数据备份方法"><a href="#数据备份方法" class="headerlink" title="数据备份方法"></a>数据备份方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --volumes-from [container name] -v $(pwd):/backup centos tar czvf /backup/backup.tar [container data volume] </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 示例</span></span></span><br><span class="line">docker run --volumes-from data-volume2 -v /root/backup:/backup --name datavolume-copy  centos tar zcvf /backup/data-volume2.tar.gz /datavolume6</span><br></pre></td></tr></table></figure><h3 id="数据还原方法"><a href="#数据还原方法" class="headerlink" title="数据还原方法"></a>数据还原方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run --volumes-from [container name] -v $(pwd):/backup centos tar xzvf /backup/backup.tar.gz [container data volume] </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 示例</span></span></span><br><span class="line">docker exec -it data-volume2 /bin/bash</span><br><span class="line">cd /datavolume6</span><br><span class="line">rm -rf lucky.txt</span><br><span class="line"></span><br><span class="line">docker run --volumes-from data-volume2 -v /root/backup/:/backup centos tar zxvf /backup/data-volume2.tar.gz -C /datavolume6</span><br><span class="line"></span><br><span class="line">docker exec -it data-volum2 /bin/bash</span><br><span class="line">cd /datavolum6</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 可以看到还原后的数据</span></span></span><br></pre></td></tr></table></figure><h1 id="容器网路互联"><a href="#容器网路互联" class="headerlink" title="容器网路互联"></a>容器网路互联</h1><p>docker0 : 安装 docker 的时候，会生成一个 docker0 的虚拟网桥</p><img src="/2023/02/07/devops/docker-quickstart-note/docker-network.png" class="" title="img"><p>Linux虚拟网桥: 可以设置 ip 地址 相当于拥有一个隐藏的虚拟网卡；每运行一个 docker 容器都会生成一个 veth 设备对，这个 veth一个接口在容器里，一个接口在物理机上。</p><p>安装网桥管理工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install bridge-utils -y </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如果无法安装，尝试在线下载</span></span></span><br><span class="line">rpm -ivh http://mirror.centos.org/centos/7/os/x86_64/Packages/bridge-utils-1.5-9.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>brctl show 可以查看到有一个 docker0 的网桥设备，下面有很多接口，每个接口都表示一个启动的 docker 容器，因为我在 docker 上启动了很多容器，所以 interfaces 较多，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos _data]# brctl show</span><br><span class="line">bridge name     bridge id               STP enabled     interfaces</span><br><span class="line">docker0         8000.0242b0124965       no              veth2d2a35d</span><br><span class="line">                                                        veth883ebd5</span><br><span class="line">                                                        veth990689c</span><br></pre></td></tr></table></figure><p>实验用例准备（由于centos 镜像被docker官方标记为deprecated,很多依赖拉取失败,可以制作一个基础镜像备用,节省环境准备时间）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 准备测试镜像</span></span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## begin bugfix</span></span></span><br><span class="line">RUN cd /etc/yum.repos.d/</span><br><span class="line">RUN sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line">RUN sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line">RUN yum update -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## end</span></span> </span><br><span class="line">RUN yum clean all</span><br><span class="line">RUN yum install wget -y</span><br><span class="line">RUN yum install nginx -y</span><br><span class="line">RUN sed -i &quot;7s/^/#/g&quot; /etc/nginx/conf.d/default.conf</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 构建</span></span></span><br><span class="line">docker build -t=&quot;inter-image&quot; .</span><br></pre></td></tr></table></figure><h2 id="允许所有容器间互联"><a href="#允许所有容器间互联" class="headerlink" title="允许所有容器间互联"></a>允许所有容器间互联</h2><ol><li>同一台机器的容器启动后默认是互联的，但是容器重启后IP被重新分配。 </li><li>docker <code>--link</code>设置网络别名，给容器起一个代号，这样可以直接以代号访问，避免了容器重启 ip 变化带来的问题 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 语法</span></span></span><br><span class="line">docker run --link=[CONTAINER_NAME]:[ALIAS] [IMAGE][COMMAND]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 先启动一个容器 network01</span></span></span><br><span class="line">docker run --name network01 -itd inter-image /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 然后启动第二个容器 network02</span></span></span><br><span class="line">docker run --name network02 -itd --link=network01:webnet inter-image /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 在network02上访问network01容器只需要，ping webnet即可。我们重启network01容器，ip变化了也没问题。</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="容器的网络模式"><a href="#容器的网络模式" class="headerlink" title="容器的网络模式"></a>容器的网络模式</h2><p>docker run 创建 Docker 容器时，可以用–net 选项指定容器的网络模式，Docker 有以下 4 种网络模式：</p><ol><li>bridge 模式：使–net &#x3D;bridge 指定，默认设置；</li><li>host 模式：使–net &#x3D;host 指定；</li><li>none 模式：使–net &#x3D;none 指定；</li><li>container 模式：使用–net &#x3D;container:NAME orID 指定。</li></ol><h3 id="brigde-模式"><a href="#brigde-模式" class="headerlink" title="brigde 模式"></a>brigde 模式</h3><p>当<code>Docker</code>进程启动时，会在主机上创建一个名为<code>docker0</code>的虚拟网桥，此主机上启动的<code>Docker</code>容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。从<code>docker0</code>子网中分配一个 IP 给容器使用，并设置 docker0 的 IP 地址为容器的<strong>默认网关</strong>。在主机上创建一对虚拟网卡<code>veth pair</code>设备，Docker 将 veth pair 设备的一端放在新创建的容器中，并命名为<code>eth0</code>（容器的网卡），另一端放在主机中，以<code>vethxxx</code>这样类似的名字命名，并将这个网络设备加入到 docker0 网桥中。可以通过<code>brctl show</code>命令查看。</p><p><code>bridge</code>模式是 docker 的默认网络模式，不写<code>–net</code>参数，就是<code>bridge</code>模式。使用<code>docker run -p</code>时，docker 实际是在<code>iptables</code>做了<code>DNAT</code>规则，实现端口转发功能。可以使用<code>iptables -t nat -vnL</code>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name bridge -it --privileged=true centos bash</span><br></pre></td></tr></table></figure><h3 id="host-模式"><a href="#host-模式" class="headerlink" title="host 模式"></a>host 模式</h3><p>如果启动容器的时候使用<code>host</code>模式，那么这个容器将不会获得一个独立的<code>Network Namespace</code>，而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name host -it --net=host --privileged=true centos bash</span><br></pre></td></tr></table></figure><h3 id="none-模式"><a href="#none-模式" class="headerlink" title="none 模式"></a>none 模式</h3><p>使用<code>none</code>模式，Docker 容器拥有自己的 Network Namespace，但是，并不为Docker 容器进行任何网络配置。也就是说，这个 Docker 容器没有网卡、IP、路由等信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 示例</span></span></span><br><span class="line">docker run -itd --name none --net=none --privileged=true centos</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 只有本地lo地址</span></span></span><br><span class="line">lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line"> link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line"> inet 127.0.0.1/8 scope host lo</span><br><span class="line"> valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h3 id="container-模式"><a href="#container-模式" class="headerlink" title="container 模式"></a>container 模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name container2 --net=container:none -it --privileged=true centos</span><br></pre></td></tr></table></figure><h1 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h1><h2 id="Docker资源配额"><a href="#Docker资源配额" class="headerlink" title="Docker资源配额"></a>Docker资源配额</h2><p>Docker 通过 cgroup 来控制容器使用的资源限制，可以对 docker 限制的资源包括 CPU、内存、磁盘</p><h3 id="控制CPU"><a href="#控制CPU" class="headerlink" title="控制CPU"></a>控制CPU</h3><h4 id="CPU份额"><a href="#CPU份额" class="headerlink" title="CPU份额"></a>CPU份额</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看配置份额的帮助命令：</span></span><br><span class="line"> docker run --help | grep cpu-shares </span><br><span class="line"> -c, --cpu-shares int                 CPU shares (relative weight)</span><br></pre></td></tr></table></figure><p>CPU shares (relative weight) 在创建容器时指定容器所使用的 CPU 份额值。cpu-shares 的值不能保证可以获得 1 个 vcpu 或者多少 GHz 的 CPU 资源，仅仅只是一个弹性的加权值。<br><code>默认每个 docker 容器的 cpu 份额值都是 1024</code>。在同一个 CPU 核心上，同时运行多个容器时，容器的 cpu 加权的效果才能体现出来。</p><blockquote><p>两个容器 A、B 的 cpu 份额分别为 1000 和 500，结果会怎么样？</p></blockquote><p>情况 1：A 和 B 正常运行，占用同一个 CPU，<code>在 cpu 进行时间片分配的时候，容器 A 比容器 B 多一倍 的机会获得 CPU 的时间片</code>。<br>情况 2：<code>分配的结果取决于当时其他容器的运行状态</code>。比如容器 A 的进程一直是空闲的，那么容器 B 是可以获取比容器 A 更多的 CPU 时间片的； 比如主机上只运行了一个容器，即使它的 cpu 份额只有 50，它也可以独占整个主机的 cpu 资源。<br><code>cgroups 只在多个容器同时争抢同一个 cpu 资源时，cpu 配额才会生效</code>。因此，无法单纯根据某个容 器的 cpu 份额来确定有多少 cpu 资源分配给它，<code>资源分配结果取决于同时运行的其他容器的cpu分配和容器中进程运行情况</code>。<br>示例：给容器实例分配 512 权重的 cpu 使用份额</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 参数： --cpu-shares 512</span></span></span><br><span class="line">docker run -it --cpu-shares 512 centos /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看结果：</span></span><br><span class="line">cat /sys/fs/cgroup/cpu/cpu.shares</span><br></pre></td></tr></table></figure><blockquote><p>注：稍后，我们启动多个容器，测试一下是不是只能使用 512 份额的 cpu 资源。单独一个容器，看 不出来使用的 cpu 的比例。 因没有 其他docker 实例同此 docker 实例竞争</p></blockquote><p>通过-c 设置的 cpu share 并不是 CPU 资源的绝对数量，而是一个相对的权重值。某个容器最终能 分配到的 CPU 资源取决于它的 cpu share 占所有容器 cpu share 总和的比例。通过 cpu share 可以<code>设置容器使用 CPU 的优先级</code>。<br>比如在 host 中启动了两个容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name &quot;container_A&quot; -c 1024 ubuntu</span><br><span class="line">docker run --name &quot;container_B&quot; -c 512 ubuntu</span><br></pre></td></tr></table></figure><p>container_A 的 cpu share 1024，是 container_B 的两倍。当两个容器都需要 CPU 资源时， container_A 可以得到的 CPU 是 container_B 的两倍。<br>需要注意的是，这种按权重分配 CPU 只会发生在 CPU 资源紧张的情况下。如果 container_A 处于空 闲状态，为了充分利用 CPU 资源，container_B 也可以分配到全部可用的 CPU。</p><h4 id="CPU-core核心控制"><a href="#CPU-core核心控制" class="headerlink" title="CPU core核心控制"></a>CPU core核心控制</h4><p>参数：–cpuset 可以绑定 CPU<br>对多核 CPU 的服务器，docker 还可以控制容器运行限定使用哪些 cpu 内核和内存节点，即使用<code>-- cpuset-cpus</code> 和<code>--cpuset-mems</code> 参数。<code>对具有 NUMA 拓扑（具有多 CPU、多内存节点）的服务器尤其有 用</code>，可以对需要高性能计算的容器进行性能最优的配置。如果服务器只有一个内存节点，则– cpuset-mems 的配置基本上不会有明显效果。</p><h4 id="CPU控制参数混合使用"><a href="#CPU控制参数混合使用" class="headerlink" title="CPU控制参数混合使用"></a>CPU控制参数混合使用</h4><p>在上面这些参数中，cpu-shares 控制只发生在容器竞争同一个 cpu 的时间片时有效。 如果通过 cpuset-cpus 指定容器 A 使用 cpu 0，容器 B 只是用 cpu1，在主机上只有这两个容器使用 对应内核的情况，它们各自占用全部的内核资源，cpu-shares 没有明显效果。</p><blockquote><p>如何才能有效果？</p></blockquote><p>容器 A 和容器 B 配置上 cpuset-cpus 值并都绑定到同一个 cpu 上，然后同时抢占 cpu 资源，就可以 看出效果了。<br>测试 cpu-shares 和 cpuset-cpus 混合使用运行效果，就需要一个压缩力测试工具 stress 来让 容器实例把 cpu 跑满。</p><blockquote><p>如何把 cpu 跑满？</p></blockquote><p>如何把 4 核心的 cpu 中第一和第三核心跑满？可以运行 stress，然后使用 taskset 绑定一下 cpu。</p><h5 id="stress工具"><a href="#stress工具" class="headerlink" title="stress工具"></a>stress工具</h5><p>linux 系统压力测试软件 stress</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install stress -y</span><br></pre></td></tr></table></figure><p><a href="/Applications/Joplin.app/Contents/Resources/app.asar/%E8%BF%98%E6%B2%A1%E5%86%99%E5%A5%BD%E5%91%A2">stress的使用点这里了解</a></p><h3 id="控制内存"><a href="#控制内存" class="headerlink" title="控制内存"></a>控制内存</h3><p>Docker 提供参数-m, –memory&#x3D;””限制容器的内存使用量。<br>例 1：允许容器使用的内存上限为 128M：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -m 128m centos</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入容器查看内存设定值</span></span></span><br><span class="line">cat /sys/fs/cgroup/memory/memory.limit_in_bytes</span><br></pre></td></tr></table></figure><p>例 2：创建一个 docker，只使用 2 个 cpu 核心，只能使用 128M 内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --cpuset-cpus 0,1 -m 128m centos</span><br></pre></td></tr></table></figure><h3 id="控制IO"><a href="#控制IO" class="headerlink" title="控制IO"></a>控制IO</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --help | grep write-b </span><br><span class="line">--device-write-bps list          Limit write rate (bytes per second) to a device (default [])</span><br></pre></td></tr></table></figure><blockquote><p>–device-read-bps value 限制此设备上的写速度（bytes per second），单位可以是 kb、mb 或者 gb。</p></blockquote><p>防止某个 Docker 容器吃光你的磁盘 I &#x2F; O 资源<br>例 1：限制容器实例对硬盘的最高写入速度设定为 2MB&#x2F;s。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/www/html/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># --device 参数：将主机设备添加到容器</span></span></span><br><span class="line">docker run -it -v /var/www/html/:/var/www/html --device  /dev/sda:/dev/sda --device-write-bps /dev/sda:2mb centos /bin/bash</span><br><span class="line"></span><br><span class="line">time dd if=/dev/sda of=/var/www/html/test.out bs=2M count=50 oflag=direct,nonblock</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 注：dd 参数说明</span></span></span><br><span class="line">direct：读写数据采用直接 IO 方式，不走缓存。直接从内存写硬盘上。</span><br><span class="line">nonblock：读写数据采用非阻塞 IO 方式，优先写 dd 命令的数据</span><br><span class="line">50+0 records in</span><br><span class="line">50+0 records out</span><br><span class="line">52428800 bytes (52 MB) copied, 50.1831 s, 2.0 MB/s</span><br></pre></td></tr></table></figure><h3 id="容器结束自动释放资源"><a href="#容器结束自动释放资源" class="headerlink" title="容器结束自动释放资源"></a>容器结束自动释放资源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --help | grep rm</span><br><span class="line">--rm 参数： Automatically remove the container when it exits</span><br></pre></td></tr></table></figure><p>作用：当容器命令运行结束后，自动删除容器，自动释放资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --name auto-rm-test centos sleep 6</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 6秒后自动销毁</span></span></span><br><span class="line">docker ps -a | grep auto-rm-test</span><br></pre></td></tr></table></figure><h1 id="镜像仓库harbor"><a href="#镜像仓库harbor" class="headerlink" title="镜像仓库harbor"></a>镜像仓库harbor</h1><p>Docker 容器应用的开发和运行离不开可靠的镜像管理，虽然 Docker 官方也提供了公共的镜像仓库， 但是从安全和效率等方面考虑，部署我们私有环境内的 Registry 也是非常必要的。Harbor 是由 VMware 公司开源的企业级的 Docker Registry 管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、 自我注册、镜像复制和中文支持等功能。<br> 官网地址：<a href="https://github.com/goharbor/harbor">https://github.com/goharbor/harbor</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KeePass生成随机和管理随机密码,仅支持windows平台</title>
      <link href="/2023/02/07/others/keepass-generate-passwd/"/>
      <url>/2023/02/07/others/keepass-generate-passwd/</url>
      
        <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">KeePass使用说明</span><br><span class="line">1、下载软件</span><br><span class="line">从 https://keepass.info/download.html 下载 KeePass-2.52-Setup.exe 并安装</span><br><span class="line">2、复制中文包到软件目录</span><br><span class="line">从 https://keepass.info/translations.html 下载中文包，</span><br><span class="line">解压后将 Languages\Chinese<span class="emphasis">_Simplified.lngx 复制到 C:\Program Files\KeePass Password Safe 2\Languages\ 下</span></span><br><span class="line"><span class="emphasis">3、设置为中文界面</span></span><br><span class="line"><span class="emphasis">打开软件，点击 View \ Change Language ，选择 简体中文，重启</span></span><br><span class="line"><span class="emphasis">4、创建密码数据库</span></span><br><span class="line"><span class="emphasis">点击 文件 \ 新建，点击 Ok，点击 保存</span></span><br><span class="line"><span class="emphasis">【关键】输入足够强度的密码，建议20位以上，包含大小写数字特殊符号</span></span><br><span class="line"><span class="emphasis">5、使用KeePass</span></span><br><span class="line"><span class="emphasis">点击 工具 \ 生成密码，选定策略后如16位，点击保存</span></span><br><span class="line"><span class="emphasis">【关键】任何站点、主机、用户密码都不要相同</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keepass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bsdiff差分工具包的安装和测试使用</title>
      <link href="/2023/02/06/devops/bsdiff/"/>
      <url>/2023/02/06/devops/bsdiff/</url>
      
        <content type="html"><![CDATA[<p>bsdiff是一个差分工具包，可用于减少升级app或者替换资源的体积。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>bsdiff 和依赖的bzip2下载<br><a href="https://sourceware.org/pub/bzip2/">https://sourceware.org/pub/bzip2/</a><br><a href="https://src.fedoraproject.org/lookaside/pkgs/bsdiff/">https://src.fedoraproject.org/lookaside/pkgs/bsdiff/</a></p><p>官网说明：<a href="https://www.daemonology.net/bsdiff/">https://www.daemonology.net/bsdiff/</a></p><p>先解压 <code>bsdiff.4.3.0.tar.gz</code>,然后进入<code>cd bsdiff.4.3.0/</code> 解压bzip2</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>Linux环境下需要修改几个文件后，再执行make编译。</p><p>修改Makefile,.ifndef和.endif增加tab空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS          +=      -O3 -lbz2</span><br><span class="line"> </span><br><span class="line">PREFIX          ?=      /usr/local</span><br><span class="line">INSTALL_PROGRAM ?=      $&#123;INSTALL&#125; -c -s -m <span class="number">555</span></span><br><span class="line">INSTALL_MAN     ?=      $&#123;INSTALL&#125; -c -m <span class="number">444</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">all</span>:            bsdiff bspatch</span><br><span class="line">bsdiff:         bsdiff.c</span><br><span class="line">bspatch:        bspatch.c</span><br><span class="line"> </span><br><span class="line">install:</span><br><span class="line">        $&#123;INSTALL_PROGRAM&#125; bsdiff bspatch $&#123;PREFIX&#125;/<span class="built_in">bin</span></span><br><span class="line">        .ifndef WITHOUT_MAN</span><br><span class="line">        $&#123;INSTALL_MAN&#125; bsdiff<span class="number">.1</span> bspatch<span class="number">.1</span> $&#123;PREFIX&#125;/man/man1</span><br><span class="line">        .endif</span><br></pre></td></tr></table></figure><p>修改bsdiff.c ,引入bzip2的头文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#include &lt;bzlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;err.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"> </span><br><span class="line">/** 导入bzip2的引用*/</span><br><span class="line"><span class="comment">#include &quot;bzip2/bzlib.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/crctable.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/compress.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/decompress.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/randtable.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/blocksort.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/huffman.c&quot;</span></span><br></pre></td></tr></table></figure><p>修改bspatch.c ,引入bzip2的头文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;bzlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;err.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></span><br><span class="line"> </span><br><span class="line">/** 导入bzip2的引用*/</span><br><span class="line"><span class="comment">#include &quot;bzip2/bzlib.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/crctable.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/compress.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/decompress.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/randtable.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/blocksort.c&quot;</span></span><br><span class="line"><span class="comment">#include &quot;bzip2/huffman.c&quot;</span></span><br></pre></td></tr></table></figure><p>修改完毕后，再执行make编译，生成两个可执行文件 <code>bsdiff</code>和<code>bspatch</code></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>bsdiff 用来生成差分包<br>bspatch用来合并差分包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@sf106074 bsdiff-<span class="number">4.3</span>]<span class="comment"># ./bsdiff</span></span><br><span class="line">bsdiff: usage: ./bsdiff oldfile newfile patchfile</span><br><span class="line">                        旧文件   存在的新文件  新生成的差分包名称</span><br><span class="line">[root@sf106074 bsdiff-<span class="number">4.3</span>]<span class="comment"># ./bspatch</span></span><br><span class="line">bspatch: usage: ./bspatch oldfile newfile patchfile</span><br><span class="line">                         旧文件    新合并的文件名称  存在的差分包</span><br></pre></td></tr></table></figure><p>可以使用md5sum 命令来验证差分文件和差分后合并新文件的正确性</p>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bsdiff </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SonarQube安装部署</title>
      <link href="/2023/02/05/devops/sonarqube-install-deploy/"/>
      <url>/2023/02/05/devops/sonarqube-install-deploy/</url>
      
        <content type="html"><![CDATA[<h2 id="SonarQube安装部署"><a href="#SonarQube安装部署" class="headerlink" title="SonarQube安装部署"></a>SonarQube安装部署</h2><h3 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h3><p>环境要求：<a href="https://docs.sonarqube.org/8.9/requirements/requirements/">https://docs.sonarqube.org/8.9/requirements/requirements/</a>  sonarqube下载：<a href="https://www.sonarqube.org/downloads/">https://www.sonarqube.org/downloads/</a>  8.9.9 TLS长期支持版</p><h3 id="安装sonarqube注意"><a href="#安装sonarqube注意" class="headerlink" title="安装sonarqube注意"></a>安装sonarqube注意</h3><ol><li><p>安装文档：<a href="https://docs.sonarqube.org/8.9/setup/install-server/">https://docs.sonarqube.org/8.9/setup/install-server/</a></p></li><li><p>支持指定jdk，必须不低于jdk11 wapper.properties</p><p>wrapper.java.command&#x3D;&#x2F;home&#x2F;sonar&#x2F;jdk-11.0.12&#x2F;bin&#x2F;java</p></li><li><p>支持修改ip，端口，和context路径</p></li><li><p>配置文件中指定数据库信息</p><p>sonar.jdbc.username&#x3D;sona sonar.jdbc.password&#x3D;mypassword  sonar.jdbc.url&#x3D;jdbc:postgresql:&#x2F;&#x2F;10.172.42.69:5432&#x2F;sonarqube</p></li><li><p>默认访问路径 localhost:9000</p></li><li><p>linux系统参数修改，root权限执行：<a href="https://docs.sonarqube.org/8.9/requirements/requirements/">https://docs.sonarqube.org/8.9/requirements/requirements/</a></p></li></ol><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>中文插件安装</p><img src="/2023/02/05/devops/sonarqube-install-deploy/sonar-chinese-plugin-install.png" class=""><p>插件离线安装</p><p>自带插件安装目录sonarqube-8.9.9.56886&#x2F;lib&#x2F;extensions ， 都是以jar包的形式组织起来；</p><img src="/2023/02/05/devops/sonarqube-install-deploy/sonar-extensions-dir-list.png" class=""><p>swift 插件 ： <a href="https://github.com/sonar-next/sonar-swift/releases">https://github.com/sonar-next/sonar-swift/releases</a> 版本1.6.1</p><p>中文插件： <a href="https://github.com/xuhuisheng/sonar-l10n-zh/releases">https://github.com/xuhuisheng/sonar-l10n-zh/releases</a> 版本8.9</p><h3 id="未登陆能查看sonar扫描结果设置"><a href="#未登陆能查看sonar扫描结果设置" class="headerlink" title="未登陆能查看sonar扫描结果设置"></a>未登陆能查看sonar扫描结果设置</h3><img src="/2023/02/05/devops/sonarqube-install-deploy/sonar-no-login-view-setting.png" class=""><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">SonarQube安装步骤：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># linux系统设置 root用户依次执行</span></span></span><br><span class="line">sysctl -w vm.max_map_count=524288</span><br><span class="line">sysctl -w fs.file-max=131072</span><br><span class="line">ulimit -n 131072</span><br><span class="line">ulimit -u 8192</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 重要！！！ 创建sonar用户，root用户无法启动sonar服务，后续操作都需要用sonar用户进行</span></span></span><br><span class="line">2.1  useradd  sonar </span><br><span class="line">2.2  cd /home/sonar </span><br><span class="line">2.3  su sonar  切换用户</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 拷贝压缩包到/home/sonar目录</span></span></span><br><span class="line">3.1  jdk压缩包  tar -zxvf jdk-11.0.12_linux-x64_bin.tar.gz</span><br><span class="line">3.2  sonarqube压缩包  tar -zxvf sonarqube-8.9.9.56886.tar.gz</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 拷贝配置覆盖sonarqube原有两个配置文件，sonar.properties 和 wrapper.conf ,文件记录数据库连接信息，jdk路径等</span></span></span><br><span class="line">4.1 /home/sonar/sonarqube-8.9.9.56886/conf/sonar.properties</span><br><span class="line">4.2 /home/sonar/sonarqube-8.9.9.56886/conf/wrapper.conf</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 中文插件和swift插件放入指定目录 ： 插件名 sonar-l10n-zh-plugin-8.9.jar , sonar-swift-plugin-1.6.1.jar</span></span></span><br><span class="line">5.1  cd /home/sonar/sonarqube-8.9.9.56886/extensions/plugins</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#  启动sonarqube</span></span></span><br><span class="line">6.1   cd /home/sonar/sonarqube-8.9.9.56886/bin/linux-x86-64</span><br><span class="line">6.2   ./sonar.sh start</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 命令行验证sonarqube是否启动成功，有返回说明成功</span></span></span><br><span class="line">7 curl http://localhost:9000</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">备注: 如果启动失败，查看启动日志排查：</span><br><span class="line">cd  /home/sonar/sonarqube-8.9.9.56886/logs</span><br><span class="line">tail -100f sonar-日期.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonarqube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群辉部署gitea来备份个人代码仓库</title>
      <link href="/2023/02/04/devops/synology-gitea-deploy/"/>
      <url>/2023/02/04/devops/synology-gitea-deploy/</url>
      
        <content type="html"><![CDATA[<h2 id="类Linux平台安装gitea"><a href="#类Linux平台安装gitea" class="headerlink" title="类Linux平台安装gitea"></a>类Linux平台安装gitea</h2><blockquote><p>普通用户权限即可操作</p></blockquote><p>软件下载地址：<a href="https://dl.gitea.io/gitea/1.17.3">https://dl.gitea.io/gitea/1.17.3</a></p><p>选择一个目录存放下载下来的软件：&#x2F;volume2&#x2F;gitea</p><p>二进制安装启动软件并初始化：<a href="https://docs.gitea.io/zh-cn/install-from-binary/">https://docs.gitea.io/zh-cn/install-from-binary/</a></p><blockquote><p>gitea的配置文件在 &#x2F;volume2&#x2F;gitea&#x2F;custom&#x2F;conf&#x2F;app.ini 路径下</p></blockquote><p><strong>restart.sh脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;Stop Procedure : gitea&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 找到运行的服务的pid kill</span></span></span><br><span class="line">pid=`ps -ef | grep gitea | grep web|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">echo &#x27;old Procedure pid:&#x27;$pid</span><br><span class="line">if [ -n &quot;$pid&quot; ]</span><br><span class="line">then</span><br><span class="line">kill -9 $pid</span><br><span class="line">fi</span><br><span class="line">echo &quot;休眠十秒，确保进程已经Killed&quot;</span><br><span class="line">sleep 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台重新启动 指定必要参数</span></span><br><span class="line">nohup /volume2/gitea/gitea web  &amp;</span><br></pre></td></tr></table></figure><h2 id="实验性尝试-Synology配置nginx转发"><a href="#实验性尝试-Synology配置nginx转发" class="headerlink" title="实验性尝试 :Synology配置nginx转发"></a>实验性尝试 :Synology配置nginx转发</h2><blockquote><p>需要root用户才能操作  synology 命令行获取root权限需要使用 <code>sudo -i</code></p></blockquote><p>在群晖内置的nginx配置目录&#x2F;usr&#x2F;syno&#x2F;share&#x2F;nginx&#x2F;conf.d 增加gitea的nginx转发配置文件：sudo vi dsm.gitea.conf <a href="https://docs.gitea.io/zh-cn/reverse-proxies/">反向代理配置请点这里查看</a></p><blockquote><p>如果用户从内网使用群晖外网quickconnect地址访问服务器，则会自动切换为内网域名。 故gitea不好配置固定的域名，会导致js,css等静态资源加载路径错误。 </p></blockquote><blockquote><p>本gitea计划是放在内网做备份仓库,对外网需求不高,故需在群晖<code>控制面板&gt;网路&gt;网络界面&gt;局域网1</code> 指定一个<code>静态IP</code>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式文件系统FastDFS入门</title>
      <link href="/2023/02/04/develop/fastdfs-quickstart/"/>
      <url>/2023/02/04/develop/fastdfs-quickstart/</url>
      
        <content type="html"><![CDATA[<p>在我们的项目中有很多需要存储的内容出现，比如图片，视频，文件等等，在早期的时候用户量不大，产生的文件也不是很多，这时我们可以把文件和服务程序放在一个服务器中。<br>后面随着文件越来越多，服务器的资源会被文件资源大量占据，从而影响到服务器的稳定，这时我们可以单独的把文件服务器拆出来。<br>拆解出来后，文件服务的使用不会影响到我们的系统服务的稳定，但是当用户量越来越大，存储的文件就会越来越多。<br>这时如果还是单台的文件服务，比如100T的文件，这时是存储不下去的，这时就产生了我们将的分布式文件存储，</p><p>分布式文件系统（Distributed File System，DFS）是指文件系统管理的物理存储资源不一定直接连接在本地节点上，而是通过计算机网络与节点（可简单的理解为一台计算机）相连；或是若干不同的逻辑磁盘分区或卷标组合在一起而形成的完整的有层次的文件系统。DFS为分布在网络上任意位置的资源提供一个逻辑上的树形文件系统结构，从而使用户访问分布在网络上的共享文件更加简便。</p><h2 id="分布式文件系统前期背景了解"><a href="#分布式文件系统前期背景了解" class="headerlink" title="分布式文件系统前期背景了解"></a>分布式文件系统前期背景了解</h2><h3 id="3-选型要求"><a href="#3-选型要求" class="headerlink" title="3. 选型要求"></a>3. 选型要求</h3><table><thead><tr><th>需求</th></tr></thead><tbody><tr><td>频繁读写、从不修改、基本不删除</td></tr><tr><td>能够存储图片、音频以及100MB以上的视频等文件</td></tr><tr><td>非常稳定、高可用、可扩容、可运维部署</td></tr><tr><td>上手简单、易于维护、社区相对活跃</td></tr><tr><td></td></tr></tbody></table><h3 id="常用分布式文件系统"><a href="#常用分布式文件系统" class="headerlink" title="常用分布式文件系统"></a>常用分布式文件系统</h3><table><thead><tr><th align="left">分布式文件系统名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">GFS（Google File System）</td><td align="left">Google公司为满足公司需求而开发的基于Linux的可扩展的分布式文件系统，用于大型的、分布式的、对大数据进行访问和应用，成本低，应用于廉价的普通硬件上，但不开源，暂不考虑。</td></tr><tr><td align="left">TFS（Taobao File System）</td><td align="left">阿里巴巴为满足了淘宝对小文件存储的需求而开发的一个可扩展、高可用、高性能、面向互联网服务、开源的分布式文件系统，主要针对海量的非结构化数据，它构筑在普通的Linux机器集群上，可为外部提供高可靠和高并发的存储访问。TFS为淘宝提供海量小文件存储，通常文件大小不超过1M，这个也暂不考虑。</td></tr><tr><td align="left">HDFS（Hadoop Distributed File System）</td><td align="left">Hadoop分布式文件系统，适合运行在通用硬件上做分布式存储和计算，因为它具有高容错性和可扩展性的特点，可部署在廉价的机器上，适合大数据的处理，在离线批量处理大数据上有先天的优势。<br/>Hadoop是Apache Lucene创始人Doug Cutting开发的使用广泛的文本搜索库。它起源于Apache Nutch，后者是一个开源的网络搜索引擎，本身也是Luene项目的一部分。Aapche Hadoop架构是MapReduce算法的一种开源应用，是Google开创其帝国的重要基石。</td></tr><tr><td align="left">MooseFS</td><td align="left">MooseFS 是来自波兰的开源且具备冗余容错功能的分布式 POSIX 文件系统，也是参照了 GFS 的架构，实现了绝大部分 POSIX 语义和 API，它支持通过FUSE方式将文件挂载操作，同时其提供的web管理界面非常方便查看当前的文件存储状态，对master服务器有单点依赖，用perl编写，用于中、大型文件应用，但性能相对较差，由于可能会实时访问所以暂不考虑。<br/>备注：POSIX表示可移植操作系统接口(Portable Operating System Interface of UNIX,缩写为 POSIX )，POSIX标准定义了操作系统应该为应用程序提供的接口标准</td></tr><tr><td align="left">FastDFS</td><td align="left">由淘宝的余庆先生所开发的一个开源分布式文件系统。它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。适合以文件为载体的在线服务，如相册网站、视频网站等等。FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS搭建一套高性能的文件服务器集群提供文件上传、下载等服务。但是FastDFS部署有点麻烦，且它的SKD是不全的。</td></tr><tr><td align="left">MogileFS</td><td align="left">MogileFS是一套高效开源的文件自动备份组件，由Six Apart开发，广泛应用在包括LiveJournal等web2.0站点上。支持多节点冗余，可实现自动的文件复制。不需要RAID，应用层可以直接实现RAID，不共享任何东西，通过集群接口提供服务工作于应用层，没有特殊的组件要求。使用HTTP方式通信。<br/>国内所知道的使用 MogileFS 的公司有图片托管网站 yupoo又拍,digg, 土豆, 豆瓣,1 号店, 大众点评,搜狗,安居客等等网站.基本很多网站容量，图片都超过 30T 以上。</td></tr><tr><td align="left">GridFS</td><td align="left">MongoDB是一种知名的NoSql数据库，GridFS是MongoDB的一个内置功能，它用于存储和恢复那些超过16M（BSON文件限制）的文件(如：图片、音频、视频等)，是文件存储的一种方式，但是它是存储在MonoDB的集合中。它可以直接利用已建立的复制或分片机制，所以对于文件存储来说故障恢复和扩展都容易，且GridFS不产生磁盘碎片。</td></tr><tr><td align="left">MinIO</td><td align="left">MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。它也是一个非常轻量的服务,可以很简单的和其他应用的结合。MinIO的特色在于简单、轻量级，对开发者友好，学习成本低，安装运维简单，开箱即用。</td></tr><tr><td align="left">SeaweedFS</td><td align="left">SeaweedFS是基于go语言开发高度可扩展开源的分布式存储系统，能存储数十亿文件（最终受制于你的硬盘大小）、并且速度快，内存占用小。上手使用比fastDFS要简单很多，自带Rest API。对于中小型文件效率非常高，但是单卷最大容量被程序限制到30G，建议存储文件以100MB以内为主。</td></tr><tr><td align="left">Ceph</td><td align="left">Ceph是Red Hat旗下一个成熟的分布式文件系统，而且还是一个有企业级功能的对象存储生态环境。该系统具备高性能、高可用性、高可扩展性、实时存储性等特点。虽然ceph很强大，但是学习成本高、安装运维复杂。Ceph用C++编写，存储容量可轻松达到PB级别。</td></tr><tr><td align="left">GlusterFS</td><td align="left">GlusterFS 是由美国的 Gluster 公司开发的 POSIX 分布式文件系统（以 GPL 开源），它主要应用在集群系统中，具有高扩展性、高可用性、高性能、可横向扩展等特点，并且其没有元数据服务器的设计，让整个服务没有单点故障的隐患。该系统主要是为中大型文件设计的，存储容量可轻松达到PB。它存在扩容缩容影响服务器较多、遍历目录下文件耗时、小文件性能较差的缺点。</td></tr></tbody></table><h3 id="按功能分类"><a href="#按功能分类" class="headerlink" title="按功能分类"></a>按功能分类</h3><table><thead><tr><th>功能</th><th>系统列表</th></tr></thead><tbody><tr><td>适合做通用文件系统</td><td>Ceph、MooseFS、MinIO；</td></tr><tr><td>适合做中小文件存储的文件系统</td><td>Ceph、FastDFS、MinIO、SeaweedFS；</td></tr><tr><td>适合做大文件存储的文件系统</td><td>HDFS、MinIO、Ceph、GridFS；</td></tr><tr><td>轻量级文件系统</td><td>FastDFS、MinIO、SeaweedFS；</td></tr><tr><td>简单易用，用户活跃的文件系统</td><td>HDFS、FastDFS、MinIO；</td></tr></tbody></table><blockquote><p>综上：Ceph目前不够成熟稳定，官方也明确指出不要把ceph用在生产环境中，暂不考虑；<br>经初步筛选剩下的文件系统有：HDFS、FastDFS、MinIO、GridFS。</p></blockquote><h3 id="详细评估优缺点"><a href="#详细评估优缺点" class="headerlink" title="详细评估优缺点"></a>详细评估优缺点</h3><table><thead><tr><th>分布式文件系统名称</th><th>详细评估</th></tr></thead><tbody><tr><td>HDFS</td><td>适合批量数据处理.可以部署在廉价的机器上。可以部署在廉价的机器上，但是不适合大量小文件，通过牺牲响应延时来换取高的吞吐量。</td></tr><tr><td>FastDFS</td><td>功能精简，支持在线扩容、冗余备份，部分支持跨集群同步，不存在单点故障，性能较好。但是不支持FUSE挂载和POSIX访问接口，且学习成本相对MinIO较高，且部署也相对比较复杂点。</td></tr><tr><td>MinIO</td><td>学习成本低，部署容易，适合存储大容量非结构化的数据，且有详细的中文文档。</td></tr><tr><td>GridFS</td><td>能够简化技术栈,如果已经使用了MongoDB,那么使用GridFS，就不需要其它独立的存储工具了(但是我们当前没引入MongoDB)，不过性能不如直接访问文件系统快，而且无法修改文档。如果要修改GridFS里面的文档，只能是先删除再添加(对我们当前业务没有影响)</td></tr></tbody></table><h3 id="初步结论"><a href="#初步结论" class="headerlink" title="初步结论"></a>初步结论</h3><blockquote><p>目前提供的建议选型参考为MinIO或FastDFS，<br>如果想减少技术栈的话可以考虑HDFS或GridFS，<br>如果不在乎响应时间可以考虑HDFS。</p></blockquote><h2 id="5-FastDFS"><a href="#5-FastDFS" class="headerlink" title="5. FastDFS"></a>5. FastDFS</h2><p>​<a href="https://github.com/happyfish100/fastdfs/wiki">FastDFS</a>是一个轻量级的开源分布式文件系统。2008年4月份开始启动。类似google FS的一个轻量级分布式文件系统，纯C实现，支持Linux、FreeBSD、AIX等UNIX系统。</p><p>主要解决了大容量的文件存储和高并发访问的问题，文件存取时实现了负载均衡。实现了软件方式的磁盘阵列（Redundant Arrays of Independent Drives，RAID），可以使用廉价的IDE（Integrated Drive Electronics）硬盘进行存储。并且支持存储服务器在线扩容。支持相同内容的文件只保存一份，节约磁盘空间。</p><p>​FastDFS只能通过Client API访问，不支持POSIX访问方式。</p><p>​FastDFS特别适合大中型网站使用，用来存储资源文件（如：图片、文档、音频、视频等等）</p><blockquote><p>Google FS体系结构</p></blockquote><table><thead><tr><th>两个角色</th><th>架构特点</th></tr></thead><tbody><tr><td>名字服务器（索引服务器）</td><td>不支持文件修改功能。</td></tr><tr><td>存储服务器</td><td>文件分块存储，需要索引服务器</td></tr><tr><td></td><td>一个文件可以存储多份，一个文件存储到哪些存储服务器，通常采用动态分配的方式。</td></tr></tbody></table><h3 id="5-1-文档"><a href="#5-1-文档" class="headerlink" title="5.1 文档"></a>5.1 文档</h3><p>​FastDFS没有官网。但是作者余庆（happy_fish100）担任chinaunix中FastDFS板块版主。并且会不定期更新板块中内容。<a href="http://bbs.chinaunix.net/">http://bbs.chinaunix.net/</a></p><p>​FastDFS软件可以在sourceforge中进行下载，最新版本为5.08,<a href="https://sourceforge.net/projects/fastdfs/files/">https://sourceforge.net/projects/fastdfs/files/</a></p><h3 id="5-2-FastDFS架构"><a href="#5-2-FastDFS架构" class="headerlink" title="5.2 FastDFS架构"></a>5.2 FastDFS架构</h3><h4 id="1-架构图"><a href="#1-架构图" class="headerlink" title="1. 架构图"></a>1. 架构图</h4><img src="/2023/02/04/develop/fastdfs-quickstart/FastDFS-deploy.png" class="" title="fastdfs架构图"><h4 id="2-角色"><a href="#2-角色" class="headerlink" title="2.角色"></a>2.角色</h4><table><thead><tr><th>角色</th><th>介绍</th></tr></thead><tbody><tr><td>Client</td><td>客户端。使用java语言编写的项目属于客户端。</td></tr><tr><td>Tracker Server</td><td>跟踪服务器，主要做调度工作，在访问上起负载均衡的作用。在内存中记录集群中group和storage server的状态信息，是连接Client和Storage server的枢纽。</td></tr><tr><td>Storage Server</td><td>存储服务器，文件和文件属性（meta data）都保存到存储服务器上</td></tr><tr><td></td><td></td></tr></tbody></table><h4 id="3-架构解读"><a href="#3-架构解读" class="headerlink" title="3.架构解读"></a>3.架构解读</h4><p>​只有两个角色，tracker server和storage server，不需要存储文件索引信息。</p><p>​所有服务器都是对等的，不存在Master-Slave关系。</p><p>​存储服务器采用分组方式，同组内存储服务器上的文件完全相同（RAID 1）。</p><p>​不同组的storage server之间不会相互通信。</p><p>​由storage server主动向tracker server报告状态信息，tracker server之间不会相互通信。</p><h3 id="5-3-FastDFS安装"><a href="#5-3-FastDFS安装" class="headerlink" title="5.3 FastDFS安装"></a>5.3 FastDFS安装</h3><h4 id="1-安装FastDFS依赖"><a href="#1-安装FastDFS依赖" class="headerlink" title="1.安装FastDFS依赖"></a>1.安装FastDFS依赖</h4><p>FastDFS是C语言开发的应用。安装必须使用 make , cmake 和 gcc编译器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y make cmake gcc gcc-c++</span><br></pre></td></tr></table></figure><h4 id="2-上传并解压libfastcommon-master"><a href="#2-上传并解压libfastcommon-master" class="headerlink" title="2 上传并解压libfastcommon-master"></a>2 上传并解压libfastcommon-master</h4><p>​上传libfastcommon-master 到 &#x2F;root下。 libfastcommon是从FastDFS和FastDHT中提取出来的公共C函数库</p><p>​解压 libfastcommon-master.zip 由于是zip文件所以要使用 unzip命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">unzip libfastcommon-master.zip</span><br></pre></td></tr></table></figure><h4 id="3-编译并安装"><a href="#3-编译并安装" class="headerlink" title="3 编译并安装"></a>3 编译并安装</h4><p>​libfastcommon没有提供make命令安装文件。使用的是shell脚本执行编译和安装。shell脚本为 make.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入解压后的文件</span></span></span><br><span class="line">cd libfastcommon-master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 编译</span></span></span><br><span class="line">./make.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装</span></span></span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure><p>​有固定的默认安装位置。在&#x2F;usr&#x2F;lib64 和  &#x2F;usr&#x2F;include&#x2F;fastcommon两个目录中</p><h4 id="4-创建软连接"><a href="#4-创建软连接" class="headerlink" title="4 创建软连接"></a>4 创建软连接</h4><p>​ 因为FastDFS 主程序设置的lib目录是 &#x2F;usr&#x2F;local&#x2F;lib， 所以需要创建软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ln -s /user/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so</span><br><span class="line"># ln -s /usr/local/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so</span><br></pre></td></tr></table></figure><h4 id="5-上传并解压FastDFS主程序"><a href="#5-上传并解压FastDFS主程序" class="headerlink" title="5 上传并解压FastDFS主程序"></a>5 上传并解压FastDFS主程序</h4><p>​ 上传 FastDFS_v5.08.tar.gz 到 &#x2F;root下后解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">tar zxf FastDFS_v5.08.tar.gz</span><br></pre></td></tr></table></figure><h4 id="6-编译并安装FastDFS"><a href="#6-编译并安装FastDFS" class="headerlink" title="6 编译并安装FastDFS"></a>6 编译并安装FastDFS</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入到解压后的FastDFS文件中</span></span></span><br><span class="line">cd FastDFS</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 编译</span></span></span><br><span class="line">./make.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装</span></span></span><br><span class="line">./make.sh install</span><br></pre></td></tr></table></figure><p>​安装后 FastDFS主程序所在的位置是</p><table><thead><tr><th>目录</th><th>文件说明</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;bin</td><td>可执行文件所在的位置</td></tr><tr><td>&#x2F;etc&#x2F;fdfs</td><td>配置文件所在的位置</td></tr><tr><td>&#x2F;usr&#x2F;bin</td><td>主程序代码所在位置</td></tr><tr><td>&#x2F;usr&#x2F;include&#x2F;fastdfs</td><td>包含一些插件组所在的位置</td></tr></tbody></table><h4 id="7-配置tracker"><a href="#7-配置tracker" class="headerlink" title="7 配置tracker"></a>7 配置tracker</h4><h5 id="7-1-复制配置文件"><a href="#7-1-复制配置文件" class="headerlink" title="7.1 复制配置文件"></a>7.1 复制配置文件</h5><p>​进入到 &#x2F;etc&#x2F;fdfs 中 ， 把tracker配置文件复制一份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs</span><br><span class="line">cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure><h5 id="7-2-创建数据目录"><a href="#7-2-创建数据目录" class="headerlink" title="7.2 创建数据目录"></a>7.2 创建数据目录</h5><p>​创建放置 tracker数据的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/fastdfs/tracker</span><br></pre></td></tr></table></figure><h5 id="7-3-修改配置文件"><a href="#7-3-修改配置文件" class="headerlink" title="7.3 修改配置文件"></a>7.3 修改配置文件</h5><p>​修改 tracker.conf 设置 tracker 内容存储目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">vim tracker.conf</span></span><br><span class="line">base_path=/usr/local/fastdfs/tracker</span><br></pre></td></tr></table></figure><blockquote><p> 默认端口 22122   不需要修改</p></blockquote><h5 id="7-4-启动服务"><a href="#7-4-启动服务" class="headerlink" title="7.4 启动服务"></a>7.4 启动服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service fdfs_trackerd start</span><br></pre></td></tr></table></figure><p>​启动成功后， 配置文件中 base_path 指向的目录出现 FastDFS服务相关数据目录(data目录， logs 目录)</p><h5 id="7-5-查看服务运行状态"><a href="#7-5-查看服务运行状态" class="headerlink" title="7.5 查看服务运行状态"></a>7.5 查看服务运行状态</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service fdfs_trackerd status</span><br></pre></td></tr></table></figure><p>​如果显示 is running 表示正常运行。</p><h5 id="7-6-关闭防火墙"><a href="#7-6-关闭防火墙" class="headerlink" title="7.6 关闭防火墙"></a>7.6 关闭防火墙</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br><span class="line">chkconfig iptables off</span><br><span class="line">systemctl stop firewalld #centos7 关闭防火墙</span><br></pre></td></tr></table></figure><h4 id="8-配置storage"><a href="#8-配置storage" class="headerlink" title="8 配置storage"></a>8 配置storage</h4><p>storage可以和tracker不在同一台服务器上。示例中把storage和tracker安装在同一台服务器上了。</p><h5 id="8-1-复制配置文件"><a href="#8-1-复制配置文件" class="headerlink" title="8.1 复制配置文件"></a>8.1 复制配置文件</h5><p>​进入到 &#x2F;etc&#x2F;fdfs, 把 storage 配置文件复制一份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs</span><br><span class="line">cp storage.conf.sample storage.conf</span><br></pre></td></tr></table></figure><h5 id="8-2-创建目录"><a href="#8-2-创建目录" class="headerlink" title="8.2 创建目录"></a>8.2 创建目录</h5><p>​ 创建两个目录， 把base用于存储基础数据和日志，store用于存储上传数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/fastdfs/storage/base</span><br><span class="line">mkdir -p /usr/local/fastdfs/storage/store</span><br></pre></td></tr></table></figure><h5 id="8-3-修改配置文件"><a href="#8-3-修改配置文件" class="headerlink" title="8.3 修改配置文件"></a>8.3 修改配置文件</h5><p>​storage.conf配置文件用于描述存储服务的行为，需要进行下述修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><p>​配置内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base_path=/usr/local/fastdfs/storage/base</span><br><span class="line">store_path0=/usr/local/fastdfs/storage/store</span><br><span class="line">tracker_server=tracker 服务IP：22122</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>base_path</td><td>基础路径。用于保存storage server 基础数据内容和日志内容的目录。</td></tr><tr><td>store_path0</td><td>存储路径。是用于保存FastDFS中存储文件的目录，就是要创建256*256个子目录的位置。</td></tr><tr><td>tracker_server</td><td>跟踪服务器位置。就是跟踪服务器的IP和端口。</td></tr></tbody></table><blockquote><p>base_path 和 store_path0 可以使用同一个目录。</p></blockquote><p>​启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service fdfs_storaged start</span><br></pre></td></tr></table></figure><p>​启动成功后，配置文件中base_path 指向的目录中出现FastDFS服务相关数据目录（data目录、logs目录）配置文件中的store_path0指向的目录中同样出现FastDFS存储相关数据录（data目录）。其中$store_path0&#x2F;data&#x2F;目录中默认创建若干子孙目录（两级目录层级总计256*256个目录），是用于存储具体文件数据的。</p><p>​Storage 服务器启动比较慢，因为第一次启动的时候，需要创建256*256个目录。</p><p>​查看启动状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service fdfs_storaged status</span><br></pre></td></tr></table></figure><h4 id="9-配置Nginx"><a href="#9-配置Nginx" class="headerlink" title="9 配置Nginx"></a>9 配置Nginx</h4><p>​    FastDFS是没有文件访问功能的，需要借助其他工具实现图片HTTP访问的。Nginx就具备代理虚拟机主机功能。</p><p>​Nginx (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>服务。Nginx是由伊戈尔·赛索耶夫为<a href="https://baike.baidu.com/item/%E4%BF%84%E7%BD%97%E6%96%AF/125568">俄罗斯</a>访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p><p>​Nginx 是一个很强大的高性能<a href="https://baike.baidu.com/item/Web/150564">Web</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a>服务，它具有很多非常优越的特性：在连接高并发的情况下，Nginx是<a href="https://baike.baidu.com/item/Apache/6265">Apache</a>服务不错的替代品：Nginx在美国是做虚拟主机生意的老板们经常选择的软件平台之一。</p><h5 id="9-1上传并安装fastdfs-nginx-module"><a href="#9-1上传并安装fastdfs-nginx-module" class="headerlink" title="9.1上传并安装fastdfs-nginx-module"></a>9.1上传并安装fastdfs-nginx-module</h5><p>​上传  &#x2F;fastdfs-nginx-model_v1.16.tar.gz  到 &#x2F;root 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">tar zxf fastdfs-nginx-module_v1.16.tar.gz</span><br></pre></td></tr></table></figure><h5 id="9-2-修改配置文件"><a href="#9-2-修改配置文件" class="headerlink" title="9.2.修改配置文件"></a>9.2.修改配置文件</h5><p>进入解压目录中src目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd fastdfs-nginx-module/src</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><p>​修改配置文件中第四行，把路径中local去掉。参数是用于配置安装nginx中的FastDFS组件的时候，在什么位置查找FastDFS核心代码。</p><p>修改结果如下：</p><img src="/2023/02/04/develop/fastdfs-quickstart/FastDFS-modify-config.jpg" class=""><h5 id="9-3-安装nginx的依赖"><a href="#9-3-安装nginx的依赖" class="headerlink" title="9.3.安装nginx的依赖"></a>9.3.安装nginx的依赖</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h5 id="9-4-上传Nginx-并解压"><a href="#9-4-上传Nginx-并解压" class="headerlink" title="9.4.上传Nginx 并解压"></a>9.4.上传Nginx 并解压</h5><p>上传nginx-1.16.1.tar.gz 到&#x2F;root中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">tar zxf nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure><h5 id="9-5-修改Nginx配置"><a href="#9-5-修改Nginx配置" class="headerlink" title="9.5.修改Nginx配置"></a>9.5.修改Nginx配置</h5><h5 id="进入到Nginx文件夹"><a href="#进入到Nginx文件夹" class="headerlink" title="进入到Nginx文件夹"></a>进入到Nginx文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.16.1</span><br></pre></td></tr></table></figure><h5 id="创建临时目录"><a href="#创建临时目录" class="headerlink" title="创建临时目录"></a>创建临时目录</h5><p>​修改配置文件中好多位置都使用了&#x2F;var&#x2F;temp&#x2F;nginx目录，但是默认不会自动创建这个目录，需要手动创建。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">mkdir</span> -p /var/temp/nginx</span></span><br></pre></td></tr></table></figure><h5 id="修改配置文件参数"><a href="#修改配置文件参数" class="headerlink" title="修改配置文件参数"></a>修改配置文件参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi \</span><br><span class="line">--add-module=/root/fastdfs-nginx-module/src</span><br></pre></td></tr></table></figure><p>​–add-module 必须定义，此配置信息是用于指定安装Nginx时需要加载的模块，如果未指定，Nginx安装过程不会加载fastdfs-nginx-module模块，后续功能无法实现。</p><h5 id="9-6-编译并安装"><a href="#9-6-编译并安装" class="headerlink" title="9.6.编译并安装"></a>9.6.编译并安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="9-7-配置fastdfs-nginx-module模块配置文件"><a href="#9-7-配置fastdfs-nginx-module模块配置文件" class="headerlink" title="9.7 配置fastdfs-nginx-module模块配置文件"></a>9.7 配置fastdfs-nginx-module模块配置文件</h5><p>​复制配置文件fastdfs-nginx-module&#x2F;src&#x2F;mod_fastdfs.conf 到 &#x2F;etc&#x2F;fdfs目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /root/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/</span><br></pre></td></tr></table></figure><h5 id="9-8-修改-mod-fastdfs-conf"><a href="#9-8-修改-mod-fastdfs-conf" class="headerlink" title="9.8 修改 mod_fastdfs.conf"></a>9.8 修改 mod_fastdfs.conf</h5><h5 id="进入到-x2F-etc-x2F-fdfs"><a href="#进入到-x2F-etc-x2F-fdfs" class="headerlink" title="进入到 &#x2F;etc&#x2F;fdfs"></a>进入到 &#x2F;etc&#x2F;fdfs</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/fdfs</span><br></pre></td></tr></table></figure><h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mod_fastdfs.conf</span><br></pre></td></tr></table></figure><h5 id="文件内容修改"><a href="#文件内容修改" class="headerlink" title="文件内容修改"></a>文件内容修改</h5><p>​需要修改文件中四处内容， 这四处内容的含义：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">connect<span class="emphasis">_timeout=2 #连接超时时间，单位秒</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">tracker_</span>server=tracker:22122 #tracker 服务结点</span><br><span class="line"></span><br><span class="line">url<span class="emphasis">_have_</span>group<span class="emphasis">_name=false #URL是否包含group名称</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">store_</span>path0=/home/yuqing/fastdfs #storage服务结点的存储位置，与配置storage结点一致</span><br></pre></td></tr></table></figure><p>修改结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout=10</span><br><span class="line">tracker_server=192.168.93.10:22122</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/usr/local/fastdfs/storage/store</span><br></pre></td></tr></table></figure><h5 id="9-9-提供FastDFS需要的HTTP配置文件"><a href="#9-9-提供FastDFS需要的HTTP配置文件" class="headerlink" title="9.9. 提供FastDFS需要的HTTP配置文件"></a>9.9. 提供FastDFS需要的HTTP配置文件</h5><p>复制FastDFS安装包中的两个配置文件(http.conf 和 mine.types) 到 &#x2F;etc&#x2F;fdfs目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /root/FastDFS/conf/http.conf /etc/fdfs/</span><br><span class="line">cp /root/FastDFS/conf/mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure><h5 id="9-10-创建网络访问存储服务的软连接"><a href="#9-10-创建网络访问存储服务的软连接" class="headerlink" title="9.10.  创建网络访问存储服务的软连接"></a>9.10.  创建网络访问存储服务的软连接</h5><p>​在上传文件到FastDFS后，FastDFS会返回group1&#x2F;M00&#x2F;00&#x2F;00&#x2F;xxxxxxxxx.xxx其中group1是卷名，在mod_fastdfs.conf配置文件中已配置了url_have_group_name， 以保证URL解析正确。其中的M00是FastDFS保存数据时使用的虚拟目录， 需要将这个虚拟目录定位到真实数据目录上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/fastdfs/storage/store/data/ /usr/local/fastdfs/storage/store/data/M00</span><br></pre></td></tr></table></figure><h5 id="9-11-修改nginx配置文件"><a href="#9-11-修改nginx配置文件" class="headerlink" title="9.11. 修改nginx配置文件"></a>9.11. 修改nginx配置文件</h5><p>进入到安装后 nginx目录,注意是安装目录，不是解压目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf</span><br></pre></td></tr></table></figure><h5 id="编辑配置文件-1"><a href="#编辑配置文件-1" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><h5 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h5><p>​需要修改两处</p><blockquote><p>第一处</p></blockquote><p>​user root； #Nginx需要访问linux文件系统，必须有文件系统的权限。User root代表nginx文件系统的权限是root用户权限。如果不开启权限，可能有404反问错误。</p><p>​默认效果：此内容在文件最上面</p><img src="/2023/02/04/develop/fastdfs-quickstart/FastDFS-nginx-modify-before.jpg" class=""><p>​修改后的效果：去掉注释，user后面写上root</p><img src="/2023/02/04/develop/fastdfs-quickstart/FastDFS-nginx-modify-after.jpg" class=""><blockquote><p>第二处</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  listen 8888; #storage 配置中， 有http.server_post=8888的配置信息，必须一致。配置文件是 /etc/fdfs/storaged.conf</span><br><span class="line">  server_name localhost;</span><br><span class="line">  location ~/group([0-9])/M00&#123;</span><br><span class="line">      ngx_fastdfs_module;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​默认效果：</p><img src="/2023/02/04/develop/fastdfs-quickstart/FastDFS-nginx-modify-before-2.jpg" class=""><p>​修改后的效果：</p><img src="/2023/02/04/develop/fastdfs-quickstart/FastDFS-nginx-modify-after-2.jpg" class=""><h5 id="9-12启动nginx"><a href="#9-12启动nginx" class="headerlink" title="9.12启动nginx"></a>9.12启动nginx</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入到nginx安装目录的sbin文件夹</span></span></span><br><span class="line">cd /usr/local/nginx/sbin/ </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动nginx</span></span></span><br><span class="line">./nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 关闭nginx</span></span></span><br><span class="line">./nginx -s quit</span><br></pre></td></tr></table></figure><h5 id="9-13-http请求测试"><a href="#9-13-http请求测试" class="headerlink" title="9.13 http请求测试"></a>9.13 http请求测试</h5><p>  <a href="http://ip:nginx端口/group1/M00/00/00/xxx.jpg">http://ip:nginx端口/group1/M00/00/00/xxx.jpg</a></p><h3 id="5-4-FastDFS-Docker安装"><a href="#5-4-FastDFS-Docker安装" class="headerlink" title="5.4 FastDFS Docker安装"></a>5.4 FastDFS Docker安装</h3><img src="/2023/02/04/develop/fastdfs-quickstart/nginx-fastdfs-client-invoke.png" class=""><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker search fastdfs</span><br><span class="line">docker pull delron/fastdfs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建 fastdfs工作空间，存一些配置文件</span></span><br><span class="line">mkdir -p /Users/fubin/DevTool/fastdfs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 创建Tracker服务，tracker服务默认的端口为22122，-v 实现了容器和本地目录的挂载操作。</span></span></span><br><span class="line">docker run -d --name tracker --network=host -v /Users/fubin/DevTool/fastdfs/tracker:/var/fdfs delron/fastdfs tracker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 创建Storage服务,在执行该命令时要注意对应修改TRACKER_SERVER中的ip要修改为你的Tracker服务所在的服务IP地址。</span></span></span><br><span class="line">docker run -d --name storage --network=host  -e TRACKER_SERVER=指定ip:22122 -v /Users/fubin/DevTool/fastdfs/storage:/var/fdfs -e GROUP_NAME=group1 delron/fastdfs storage</span><br></pre></td></tr></table></figure><p>默认情况下在Storage服务中是帮我们安装了Nginx服务的，相关的端口为</p><table><thead><tr><th>服务</th><th>默认端口</th></tr></thead><tbody><tr><td>tracker</td><td>22122</td></tr><tr><td>storage</td><td>23000</td></tr><tr><td>Nginx</td><td>8888</td></tr></tbody></table><blockquote><p>如果端口被占用,需要进入容器修改，<code>docker exec -it storage bash</code></p></blockquote><p>fastdfs提供了命令行工具来做测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-desktop nginx-1.12.2]# ls -al /usr/bin | grep fdfs</span><br><span class="line">-rwxr-xr-x   1 root root    304152 Apr 29  2018 fdfs_append_file</span><br><span class="line">-rwxr-xr-x   1 root root    317520 Apr 29  2018 fdfs_appender_test</span><br><span class="line">-rwxr-xr-x   1 root root    317296 Apr 29  2018 fdfs_appender_test1</span><br><span class="line">-rwxr-xr-x   1 root root    303872 Apr 29  2018 fdfs_crc32</span><br><span class="line">-rwxr-xr-x   1 root root    304208 Apr 29  2018 fdfs_delete_file</span><br><span class="line">-rwxr-xr-x   1 root root    304944 Apr 29  2018 fdfs_download_file</span><br><span class="line">-rwxr-xr-x   1 root root    304536 Apr 29  2018 fdfs_file_info</span><br><span class="line">-rwxr-xr-x   1 root root    322448 Apr 29  2018 fdfs_monitor</span><br><span class="line">-rwxr-xr-x   1 root root   1111864 Apr 29  2018 fdfs_storaged</span><br><span class="line">-rwxr-xr-x   1 root root    327464 Apr 29  2018 fdfs_test</span><br><span class="line">-rwxr-xr-x   1 root root    326680 Apr 29  2018 fdfs_test1</span><br><span class="line">-rwxr-xr-x   1 root root    453984 Apr 29  2018 fdfs_trackerd</span><br><span class="line">-rwxr-xr-x   1 root root    305136 Apr 29  2018 fdfs_upload_appender</span><br><span class="line">-rwxr-xr-x   1 root root    306160 Apr 29  2018 fdfs_upload_file</span><br></pre></td></tr></table></figure><p>我们可以使用<code>/usr/bin/fdfs_upload_file /etc/fdfs/client.conf 1.jpg</code>来上传图片</p><h3 id="5-5-Fastdfs-java-client"><a href="#5-5-Fastdfs-java-client" class="headerlink" title="5.5 Fastdfs-java-client"></a>5.5 Fastdfs-java-client</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1     添加依赖"></a>1     添加依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;cn.bestwu&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;fastdfs-client-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.27&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.4&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;    </span><br></pre></td></tr></table></figure><h4 id="2-导入工具类"><a href="#2-导入工具类" class="headerlink" title="2   导入工具类"></a>2   导入工具类</h4><p>​在com.utils.FastDFSClient 下粘贴配置工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.csource.common.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.ClientGlobal;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageClient;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageClient1;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageServer;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerClient;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FastDFS分布式文件系统操作客户端.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastDFSClient</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONF_FILENAME</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResource(<span class="string">&quot;&quot;</span>).getPath() + <span class="string">&quot;fdfs_client.conf&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">StorageClient</span> <span class="variable">storageClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 只加载一次.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         ClientGlobal.init(CONF_FILENAME);</span><br><span class="line">         <span class="type">TrackerClient</span> <span class="variable">trackerClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrackerClient</span>(ClientGlobal.g_tracker_group);</span><br><span class="line">         <span class="type">TrackerServer</span> <span class="variable">trackerServer</span> <span class="operator">=</span> trackerClient.getConnection();</span><br><span class="line">         <span class="type">StorageServer</span> <span class="variable">storageServer</span> <span class="operator">=</span> trackerClient.getStoreStorage(trackerServer);</span><br><span class="line">         storageClient = <span class="keyword">new</span> <span class="title class_">StorageClient</span>(trackerServer, storageServer);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">    *    上传的文件输入流</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">    *    上传的文件原始名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String[] uploadFile(InputStream inputStream, String fileName) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 文件的元数据</span></span><br><span class="line">         NameValuePair[] meta_list = <span class="keyword">new</span> <span class="title class_">NameValuePair</span>[<span class="number">2</span>];</span><br><span class="line">         <span class="comment">// 第一组元数据，文件的原始名称</span></span><br><span class="line">         meta_list[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;file name&quot;</span>, fileName);</span><br><span class="line">         <span class="comment">// 第二组元数据</span></span><br><span class="line">         meta_list[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">NameValuePair</span>(<span class="string">&quot;file length&quot;</span>, inputStream.available()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">         <span class="comment">// 准备字节数组</span></span><br><span class="line">         <span class="type">byte</span>[] file_buff = <span class="literal">null</span>;</span><br><span class="line">         <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 查看文件的长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.available();</span><br><span class="line">            <span class="comment">// 创建对应长度的字节数组</span></span><br><span class="line">            file_buff = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">            <span class="comment">// 将输入流中的字节内容，读到字节数组中。</span></span><br><span class="line">            inputStream.read(file_buff);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 上传文件。参数含义：要上传的文件的内容（使用字节数组传递），上传的文件的类型（扩展名），元数据</span></span><br><span class="line">         String[] fileids = storageClient.upload_file(file_buff, getFileExt(fileName), meta_list);</span><br><span class="line">         <span class="keyword">return</span> fileids;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">    *            文件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">    *            文件名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 返回Null则为失败</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String[] uploadFile(File file, String fileName) &#123;</span><br><span class="line">      <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         NameValuePair[] meta_list = <span class="literal">null</span>; <span class="comment">// new NameValuePair[0];</span></span><br><span class="line">         fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">         <span class="type">byte</span>[] file_buff = <span class="literal">null</span>;</span><br><span class="line">         <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> fis.available();</span><br><span class="line">            file_buff = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">            fis.read(file_buff);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         String[] fileids = storageClient.upload_file(file_buff, getFileExt(fileName), meta_list);</span><br><span class="line">         <span class="keyword">return</span> fileids;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (fis != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据组名和远程文件名来删除一个文件</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> groupName</span></span><br><span class="line"><span class="comment">    *            例如 &quot;group1&quot; 如果不指定该值，默认为group1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> remoteFileName</span></span><br><span class="line"><span class="comment">    *            例如&quot;M00/00/00/wKgxgk5HbLvfP86RAAAAChd9X1Y736.jpg&quot;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 0为成功，非0为失败，具体为错误代码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">deleteFile</span><span class="params">(String groupName, String remoteFileName)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> storageClient.delete_file(groupName == <span class="literal">null</span> ? <span class="string">&quot;group1&quot;</span> : groupName, remoteFileName);</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改一个已经存在的文件</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> oldGroupName</span></span><br><span class="line"><span class="comment">    *            旧的组名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> oldFileName</span></span><br><span class="line"><span class="comment">    *            旧的文件名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">    *            新文件</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">    *            新文件名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 返回空则为失败</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String[] modifyFile(String oldGroupName, String oldFileName, File file, String fileName) &#123;</span><br><span class="line">      String[] fileids = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 先上传</span></span><br><span class="line">         fileids = uploadFile(file, fileName);</span><br><span class="line">         <span class="keyword">if</span> (fileids == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 再删除</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">delResult</span> <span class="operator">=</span> deleteFile(oldGroupName, oldFileName);</span><br><span class="line">         <span class="keyword">if</span> (delResult != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fileids;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 文件下载</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> groupName 卷名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> remoteFileName 文件名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 返回一个流</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> InputStream <span class="title function_">downloadFile</span><span class="params">(String groupName, String remoteFileName)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">byte</span>[] bytes = storageClient.download_file(groupName, remoteFileName);</span><br><span class="line">         <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">         <span class="keyword">return</span> inputStream;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> NameValuePair[] getMetaDate(String groupName, String remoteFileName)&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         NameValuePair[] nvp = storageClient.get_metadata(groupName, remoteFileName);</span><br><span class="line">         <span class="keyword">return</span> nvp;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取文件后缀名（不带点）.</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 如：&quot;jpg&quot; or &quot;&quot;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getFileExt</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.isBlank(fileName) || !fileName.contains(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>); <span class="comment">// 不带最后的点</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="5-6-文件上传流程"><a href="#5-6-文件上传流程" class="headerlink" title="5.6 文件上传流程"></a>5.6 文件上传流程</h3><h4 id="1-时序图"><a href="#1-时序图" class="headerlink" title="1   时序图"></a>1   时序图</h4><img src="/2023/02/04/develop/fastdfs-quickstart/java-file-upload-invoke.png" class=""><h4 id="2-流程说明"><a href="#2-流程说明" class="headerlink" title="2   流程说明"></a>2   流程说明</h4><ol><li>客户端访问Tracker</li><li>Tracker 返回Storage的ip和端口</li><li>客户端直接访问Storage，把文件内容和元数据发送过去。</li><li>Storage返回文件存储id。包含了组名和文件名</li></ol><img src="/2023/02/04/develop/fastdfs-quickstart/upload-success-file-rename-rule.png" class=""><h4 id="3-新工程增加配置文件"><a href="#3-新工程增加配置文件" class="headerlink" title="3    新工程增加配置文件"></a>3    新工程增加配置文件</h4><p>​文件名：fdfs_client.conf</p><p>​修改成自己的tracker服务器ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout = 10</span><br><span class="line">network_timeout = 30</span><br><span class="line">charset = UTF-8</span><br><span class="line">http.tracker_http_port = 8080</span><br><span class="line">tracker_server = 192.168.93.10:22122   </span><br></pre></td></tr></table></figure><h4 id="4-测试上传功能"><a href="#4-测试上传功能" class="headerlink" title="4.  测试上传功能"></a>4.  测试上传功能</h4><p>​随意新建一个包含主方法的类。com.xxx.MyMain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastDFSUpload</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/b.png&quot;</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString()+<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">            String[] result = FastDFSClient.uploadFile(is, fileName);</span><br><span class="line">            System.out.println(Arrays.toString(result));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="5-7-文件下载"><a href="#5-7-文件下载" class="headerlink" title="5.7 文件下载"></a>5.7 文件下载</h3><h4 id="1-时序图-1"><a href="#1-时序图-1" class="headerlink" title="1     时序图"></a>1     时序图</h4><img src="/2023/02/04/develop/fastdfs-quickstart/java-file-download-invoke.png" class=""><h4 id="2-下载说明"><a href="#2-下载说明" class="headerlink" title="2     下载说明"></a>2     下载说明</h4><ol><li><p>client询问tracker下载文件的storage，参数为文件标识（组名和文件名）；</p></li><li><p>tracker返回一台可用的storage；</p></li><li><p>client直接和storage通讯完成文件下载。</p></li></ol><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3     代码实现"></a>3     代码实现</h4><p>​直接使用工具方法完成下载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> FastDFSClient.downloadFile(<span class="string">&quot;group1&quot;</span>, <span class="string">&quot;M00/00/00/wKg0gF3zAKCARs6kAAASjQVYlWA098.png&quot;</span>);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/jqk.png&quot;</span>));</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span>((index = is.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">        os.write(index);</span><br><span class="line">    &#125;</span><br><span class="line">    os.flush();</span><br><span class="line">    os.close();</span><br><span class="line">    is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：StorageClient是线程不安全的。那么我们的解决方案</p></blockquote><ol><li>对文件的操作的每个方法我们做同步处理</li><li>每次操作文件的时候我们都获取一个新的StorageClient对象</li></ol><p>第一种方式效率肯定是最低的，第二种方式每次都要建立新的连接效率同样的会受到影响，这时最好的方式其实是把StorageClient交给我们自定义的连接池来管理</p><h4 id="5-8-整合Spring-Boot"><a href="#5-8-整合Spring-Boot" class="headerlink" title="5.8 整合Spring Boot"></a>5.8 整合Spring Boot</h4><p>我们在实际工作中基本都是和SpringBoot整合在一起来使用的，那么我们就来看看FastDFS是如何在SpringBoot项目中来使用的。首先创建一个普通的SpringBoot项目，然后导入fastdfs-spring-boot-starter这个依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.luhuiguo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&amp;emsp;&amp;emsp;既然是一个starter，那么必然会在spring.factories文件中提供对应的自动配置类。</p><img src="/2023/02/04/develop/fastdfs-quickstart/spring-auto-config-class.png" class=""><p>&amp;emsp;&amp;emsp;可以看到给我们提供的配置类为FdfsAutoConfiguration进入后可以看到帮我们注入了很多的核心对象。</p><img src="/2023/02/04/develop/fastdfs-quickstart/java-spring-fastdfs-jar-core-object.png" class=""><p>&amp;emsp;&amp;emsp;然后可以看到系统提供的配置信息，前缀为 <code>fdfs</code></p><img src="/2023/02/04/develop/fastdfs-quickstart/java-fastdfs-jar-config-info.png" class=""><p>&amp;emsp;&amp;emsp;然后我们就可以在application.properties中配置FastDFS的配置信息了。</p><img src="/2023/02/04/develop/fastdfs-quickstart/java-project-properties-config-demo.png" class=""><p>&amp;emsp;&amp;emsp;配置完成后我们就可以测试文件的上传下载操作了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FastDfsSpringBootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// http://10.211.55.4:8888/group1/M00/00/00/group1/M00/00/00/CtM3BGNNCXSAT_v3AAtTC5Fgj5c785.jpg</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/fubin/Pictures/wallhaven/331673.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//图片后缀</span></span><br><span class="line">        String[] split = file.getName().split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="type">StorePath</span> <span class="variable">path</span> <span class="operator">=</span> fastFileStorageClient.uploadFile(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file),file.length(),split[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(path.getFullPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastdfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MrDoc文档系统数据备份</title>
      <link href="/2023/02/03/others/mrdoc-data-backup/"/>
      <url>/2023/02/03/others/mrdoc-data-backup/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库和静态资源备份命令编写"><a href="#数据库和静态资源备份命令编写" class="headerlink" title="数据库和静态资源备份命令编写"></a>数据库和静态资源备份命令编写</h2><p>备份MrDoc数据库，mrdoc库<br>用户名和密码要连着写，端口单独用-P 大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">bin</span>/mysqldump -h IP地址 -P <span class="number">3405</span> -uusername -ppassword  \</span><br><span class="line">    --default-character-<span class="built_in">set</span>=utf8 mrdoc &gt;  保存路径/mrdoc_mysql_`date +%Y%m%d%H%M%S`.sql</span><br></pre></td></tr></table></figure><p>备份静态资源文件 10.172.50.150 &#x2F;root&#x2F;mrdoc目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar czf  mrdoc_static_`date +%Y%m%d%H%M%S`.tar.gz  /root/mrdoc</span><br></pre></td></tr></table></figure><p>注意：如果本机没有禁止ssh权限，配置git sshkey的免密操作即可<br>生成公钥和私钥：ssh-keygen -t rsa -C “<a href="mailto:&#x75;&#115;&#101;&#x72;&#x6e;&#x61;&#109;&#x65;&#x40;&#x63;&#x6f;&#109;&#112;&#x61;&#110;&#121;&#x2e;&#99;&#x6f;&#x6d;">&#x75;&#115;&#101;&#x72;&#x6e;&#x61;&#109;&#x65;&#x40;&#x63;&#x6f;&#109;&#112;&#x61;&#110;&#121;&#x2e;&#99;&#x6f;&#x6d;</a>“</p><p>如果行不通，可在sh脚本里输入密码操作，使用expect软件 ,需要注意头引入expect</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect -f </span></span><br><span class="line"><span class="built_in">set</span> timeout <span class="number">60</span></span><br><span class="line">spawn git pull</span><br><span class="line">expect <span class="string">&quot;Username for &#x27;http://gitlab.xxxxxx.com:8090&#x27;:&quot;</span></span><br><span class="line">send <span class="string">&quot;username\r&quot;</span></span><br><span class="line">expect <span class="string">&quot;Password for &#x27;http:/username@gitlab.company.com:8090&#x27;:&quot;</span></span><br><span class="line">send <span class="string">&quot;password\r&quot;</span></span><br><span class="line">interact  <span class="comment"># interact的作用就是要将把控制权交给控制台</span></span><br><span class="line"><span class="comment">## expect eof  </span></span><br></pre></td></tr></table></figure><h2 id="备份完整脚本"><a href="#备份完整脚本" class="headerlink" title="备份完整脚本"></a>备份完整脚本</h2><p>gitpull.sh : 自动拉取最新代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"><span class="built_in">set</span> timeout <span class="number">60</span></span><br><span class="line">spawn git pull</span><br><span class="line">expect <span class="string">&quot;Username for &#x27;http://gitlab.xxxxxx.com:8090&#x27;:&quot;</span></span><br><span class="line">send <span class="string">&quot;username\r&quot;</span></span><br><span class="line">expect <span class="string">&quot;Password for &#x27;http:/username@gitlab.company.com:8090&#x27;:&quot;</span></span><br><span class="line">send <span class="string">&quot;password\r&quot;</span></span><br><span class="line">expect eof </span><br></pre></td></tr></table></figure><p>gitpush.sh：自动推送代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"><span class="built_in">set</span> timeout <span class="number">60</span></span><br><span class="line">spawn git push</span><br><span class="line">expect <span class="string">&quot;Username for &#x27;http://gitlab.xxxxxx.com:8090&#x27;:&quot;</span></span><br><span class="line">send <span class="string">&quot;username\r&quot;</span></span><br><span class="line">expect <span class="string">&quot;Password for &#x27;http:/username@gitlab.company.com:8090&#x27;:&quot;</span></span><br><span class="line">send <span class="string">&quot;password\r&quot;</span></span><br><span class="line">expect eof </span><br></pre></td></tr></table></figure><p>自动dump数据库数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">cd /root/mrdoc_backup/mobile-department-user-doc</span><br><span class="line">/root/mrdoc_backup/gitpull.sh</span><br><span class="line">/usr/<span class="built_in">bin</span>/mysqldump -h IP地址 -P <span class="number">3405</span> -uusername -ppassword  \</span><br><span class="line">    --default-character-<span class="built_in">set</span>=utf8 mrdoc &gt; 保存路径/mrdoc_mysql_`date +%Y%m%d%H%M%S`.sql</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;mrdoc mysql数据备份提交&quot;</span></span><br><span class="line">/root/mrdoc_backup/gitpush.sh</span><br></pre></td></tr></table></figure><p>自动压缩打包静态文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">cd /root/mrdoc_backup/mobile-department-user-doc</span><br><span class="line">/root/mrdoc_backup/gitpull.sh</span><br><span class="line"><span class="comment">## 绝对路径备份要f前面加P</span></span><br><span class="line">tar -czvPf  保存路径地址/mrdoc_static_`date +%Y%m%d%H%M%S`.tar.gz  /root/mrdoc</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;mrdoc mysql数据备份提交&quot;</span></span><br><span class="line">/root/mrdoc_backup/gitpush.sh</span><br></pre></td></tr></table></figure><h2 id="cron定时任务配置"><a href="#cron定时任务配置" class="headerlink" title="cron定时任务配置"></a>cron定时任务配置</h2><p>起两个cron在两台机器跑，如果想放在一台机器，静态资源服务器IP可以安装一个mysql来使用mysqldump命令，数据推送到gitlab：<a href="http://gitlab.xxxxxx.com:8090/a32-ydzt/docs/mobile-department-user-doc">http://gitlab.xxxxxx.com:8090/a32-ydzt/docs/mobile-department-user-doc</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看cron服务装状态： service crond status</span><br><span class="line">修改cron文件：crontab -e</span><br><span class="line"><span class="number">10</span>点整执行脚本备份数据库： <span class="number">0</span> <span class="number">10</span> * * * /root/mrdoc_backup/mrdoc_backup_mysql.sh &gt; /root/mrdoc_backup/mrdoc_backup_mysql_task.log <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="number">10</span>点<span class="number">20</span>分执行脚本备份静态资源： <span class="number">20</span> <span class="number">10</span> * * * /root/mrdoc_backup/mrdoc_backup_static.sh &gt;  /root/mrdoc_backup/mrdoc_backup_static_task.log <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo和gitee pages构建个人主页</title>
      <link href="/2023/02/02/others/hexo-gitee-pages-build-blog/"/>
      <url>/2023/02/02/others/hexo-gitee-pages-build-blog/</url>
      
        <content type="html"><![CDATA[<p>node npm 配置拉取node依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --registry=https://registry.npm.taobao.org </span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 恢复官方镜像</span></span></span><br><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure><p>选用的主题：<a href="https://github.com/probberechts/hexo-theme-cactus">https://github.com/probberechts/hexo-theme-cactus</a></p><h2 id="hexo-vscode报错解决"><a href="#hexo-vscode报错解决" class="headerlink" title="hexo vscode报错解决"></a>hexo vscode报错解决</h2><p>hexo s ,vscode报错 ：无法加载文件 C:\Users\Administrator\AppData\Roaming\npm\hexo.ps1，因为在此系统中禁止执行脚本。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行：get-ExecutionPolicy，返回状态：Restricted，表示状态是禁止的，</span><br><span class="line">然后要设置下</span><br><span class="line">执行：set-ExecutionPolicy RemoteSigned 开启</span><br><span class="line">选择Y</span><br></pre></td></tr></table></figure><h2 id="hexo-图片资源不显示"><a href="#hexo-图片资源不显示" class="headerlink" title="hexo 图片资源不显示"></a>hexo 图片资源不显示</h2><p>npm install hexo-asset-image –save 插件安装：<a href="https://github.com/xcodebuild/hexo-asset-image">https://github.com/xcodebuild/hexo-asset-image</a></p><p>使用 Hexo-asset-image 插件静态图片路径会变成一个错误的路径.解决方法如下：</p><p>cd node_modules&#x2F;hexo-asset-image&#x2F;<br>vim index.js<br>在 59 行附近, 将以下代码替换掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $(this).attr(&#x27;src&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="comment">// console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, data.<span class="property">permalink</span> +src);</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span> + data.<span class="property">permalink</span> + src);</span><br></pre></td></tr></table></figure><p>除了直接修改代码，也可以使用另一个资源：<a href="https://github.com/yiyungent/hexo-asset-img">https://github.com/yiyungent/hexo-asset-img</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先卸载原来的图片展示插件</span></span><br><span class="line">npm uninstall hexo-asset-image</span><br><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
